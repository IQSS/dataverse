# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

unless defined? OUTPUT_VERBOSITY
  # Output Verbosity 0..3 least..most
  if ENV['OUTPUT_VERBOSITY'].nil?
    OUTPUT_VERBOSITY = '3'
  else
    OUTPUT_VERBOSITY = ENV['OUTPUT_VERBOSITY']
  end
end

unless defined? STATIC_IP_SOLR 
  STATIC_IP_SOLR = "192.168.20.10"
end

unless defined? STATIC_IP_DATAVERSE 
  STATIC_IP_DATAVERSE = "192.168.20.20"
end

unless defined? SOLR_VERSION
  SOLR_VERSION = '5.4.1'
end

unless defined? SOLR_INSTALL_DIR
  SOLR_INSTALL_DIR = '/opt'
end

unless defined? ENABLE_TLS_ON_SOLR
  # Set this to non-zero to configure the solr service to use TLS/SSL
  if ENV['ENABLE_TLS_ON_SOLR'].nil?
    ENABLE_TLS_ON_SOLR = 0
  else
    ENABLE_TLS_ON_SOLR = ENV['ENABLE_TLS_ON_SOLR']
  end
end

unless defined? KEYSTORE_PATH
  KEYSTORE_PATH = '/etc/pki/java/dataverse_keystore.jks'
end

unless defined? KEYSTORE_PASSWORD
  KEYSTORE_PASSWORD = 'dataverse'
end

unless defined? TRUSTSTORE_PATH
  TRUSTSTORE_PATH = '/etc/pki/java/dataverse_truststore.jks'
end

unless defined? TRUSTSTORE_PASSWORD
  TRUSTSTORE_PASSWORD = 'dataverse'
end

unless defined? DVCOLLECTION_NAME
  DVCOLLECTION_NAME = 'dvcollection'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 1
  end

  config.vm.define "solr" do |solr|
    solr.vm.hostname = "solr"
    solr.vm.box = "puppetlabs/centos-6.6-64-puppet"
    solr.vm.network "private_network", ip: STATIC_IP_SOLR
    solr.vm.synced_folder "../../../", "/dataverse"
    
    solr.vm.provision "installSolrService", type: "shell",
      path: "../install-solr-service.sh", 
      args: "-s #{SOLR_VERSION} -v #{OUTPUT_VERBOSITY} -x #{STATIC_IP_SOLR} -i #{SOLR_INSTALL_DIR}"
    if (ENABLE_TLS_ON_SOLR != 0)
      solr.vm.provision "setupTLS", type: "shell", 
        path: "../setup-tls-solr.sh",
        args: "-k #{KEYSTORE_PATH} -p #{KEYSTORE_PASSWORD} -v #{OUTPUT_VERBOSITY} -w #{TRUSTSTORE_PASSWORD} -x #{STATIC_IP_SOLR}"
      solr.vm.provision "enableTLSonSolr", type: "shell", 
        path: "../enable-tls-onSolr.sh",
        args: "-k #{KEYSTORE_PATH} -p #{KEYSTORE_PASSWORD} -t #{TRUSTSTORE_PATH} -v #{OUTPUT_VERBOSITY} -w #{TRUSTSTORE_PASSWORD}"
#        args: "-k #{KEYSTORE_PATH} -p #{KEYSTORE_PASSWORD} -s -t #{TRUSTSTORE_PATH} -v #{OUTPUT_VERBOSITY} -w #{TRUSTSTORE_PASSWORD}"
#### Glassfish TLS client certificate configuration isn't working currently -s/-r options break the connection ####
    end
    solr.vm.provision "createDataverseCollection", type: "shell", 
      path: "../setup-dvcollection.sh", args: "-c '#{DVCOLLECTION_NAME}' -i '#{SOLR_INSTALL_DIR}' -v #{OUTPUT_VERBOSITY}"
    solr.vm.provision "killFirewall", type: "shell", inline: "service iptables stop"

  end

  config.vm.define "dataverse", primary: true do |dataverse|
    dataverse.vm.hostname = "dataverse"
    dataverse.vm.box = "puppetlabs/centos-6.6-64-puppet"
    dataverse.vm.network "private_network", ip: STATIC_IP_DATAVERSE
    dataverse.vm.synced_folder "../../../", "/dataverse"

    unless defined? mailserver
      mailserver = "localhost"
      if ENV['MAIL_SERVER'].nil?
        puts "MAIL_SERVER environment variable not specified. Using #{mailserver} by default.\nTo specify it in bash: export MAIL_SERVER=localhost"
      else
        mailserver = ENV['MAIL_SERVER']
        puts "MAIL_SERVER environment variable found, using #{mailserver}"
      end
    end

    dataverse.vm.provision "dataversePrereqs", type: "shell", 
      path: "../setup.sh", args: "-v #{OUTPUT_VERBOSITY}"
    dataverse.vm.provision "killFirewall", type: "shell", inline: "service iptables stop"
    if (ENABLE_TLS_ON_SOLR != 0)
      dataverse.vm.provision "addGlassfishDomainTLS", type: "shell", 
        path: "../setup-tls-dataverse.sh",
        args: "-v #{OUTPUT_VERBOSITY} -w #{TRUSTSTORE_PASSWORD} -x #{STATIC_IP_DATAVERSE}" 
      dataverse.vm.provision "addTrustToGlassfishDomain", type: "shell", 
        inline: "keytool -importkeystore -noprompt -srckeystore /vagrant/dataverse_truststore.jks -srcstorepass #{KEYSTORE_PASSWORD} -destkeystore ~glassfish/glassfish4/glassfish/domains/domain1/config/cacerts.jks -deststorepass changeit"

      remote_cmd = "ssh  -o StrictHostKeyChecking=no -i /vagrant/.vagrant/machines/solr/virtualbox/private_key vagrant@#{STATIC_IP_SOLR}"
      remote_cmd << " 'sudo cp /vagrant/dataverse_truststore.jks #{TRUSTSTORE_PATH}; sudo service solr restart; sudo rm /vagrant/dataverse_truststore.jks'"
      dataverse.vm.provision "remoteAddTrustRestartSolr", type: "shell", inline: remote_cmd      

    end
    dataverse.vm.provision "dataverseSetup", type: "shell", path: "../install-dataverse.sh",
      args: "-c #{DVCOLLECTION_NAME} -h #{STATIC_IP_DATAVERSE} -m #{mailserver} -s #{STATIC_IP_SOLR} -u #{ENABLE_TLS_ON_SOLR} -v #{OUTPUT_VERBOSITY}"


    dataverse.vm.provision "dvTestUsers", type: "shell", 
      path: "../setup-dv-test_addUsers.sh", args: "#{STATIC_IP_DATAVERSE}"
    dataverse.vm.provision "dvTestPublishRoot", type: "shell", 
      path: "../setup-dv-test_publishRoot.sh", args: "#{STATIC_IP_DATAVERSE}"
    dataverse.vm.provision "dvTestSetupUserDVs", type: "shell", 
      path: "../setup-dv-test_setupUserDVs.sh", args: "#{STATIC_IP_DATAVERSE}"
  end

end
