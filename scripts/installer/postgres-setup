#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Socket;
use File::Copy;
#for timing purposes

my $verbose;
my $pg_only;
my $force;

my @CONFIG_VARIABLES;
my $WORKING_OS = "";
my $postgresonly = 0;

    @CONFIG_VARIABLES =
      ( 'POSTGRES_SERVER', 'POSTGRES_PORT', 'POSTGRES_DATABASE', 'POSTGRES_USER', 'POSTGRES_PASSWORD', 'POSTGRES_ADMIN_PASSWORD' );
    

my %CONFIG_DEFAULTS = (

    'POSTGRES_ADMIN_PASSWORD', 'secret',
    'POSTGRES_SERVER',   '127.0.0.1',
    'POSTGRES_PORT',     5432,
    'POSTGRES_DATABASE', 'dvndb',
    'POSTGRES_USER',     'dvnapp',
    'POSTGRES_PASSWORD', 'secret',
);


my %CONFIG_PROMPTS = (
    'POSTGRES_SERVER',   'Postgres Server Address',
    'POSTGRES_PORT',     'Postgres Server Port',
    'POSTGRES_ADMIN_PASSWORD', 'Postgres ADMIN password',
    'POSTGRES_DATABASE', 'Name of the Postgres Database',
    'POSTGRES_USER',     'Name of the Postgres User',
    'POSTGRES_PASSWORD', 'Postgres user password',
);

    $CONFIG_DEFAULTS{'POSTGRES_PORT'} = $ENV{'DB_PORT'};
    $CONFIG_DEFAULTS{'POSTGRES_SERVER'} = $ENV{'DB_HOST'};
    $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} = $ENV{'DB_NAME'};
    $CONFIG_DEFAULTS{'POSTGRES_USER'} = $ENV{'DB_USER'};
    $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} = $ENV{'DB_PASS'};
# Supported Posstgres JDBC drivers:
# (have to be configured explicitely, so that Perl "taint" (security) mode
# doesn't get paranoid)
# 3. CHECK POSTGRES AND JQ AVAILABILITY:

my $pg_local_connection = 0;
my $psql_exec;
my $jq_exec = "";
my $pg_major_version = 0;
my $pg_minor_version = 0;
my $pod_name = "";
$pod_name = $ENV{'MY_POD_NAME'};

my $POSTGRES_SYS_UID;
if ( $CONFIG_DEFAULTS{'POSTGRES_SERVER'} eq 'localhost' || $CONFIG_DEFAULTS{'POSTGRES_SERVER'} eq '127.0.0.1' ) 
{
    $pg_local_connection = 1;
} 
elsif ($pg_only) 
{
    print "In the --pg_only mode the script can only be run LOCALLY,\n";
    print "i.e., on the server where PostgresQL is running, with the\n";
    print "Postgres server address as localhost - \"127.0.0.1\".\n";
    exit 1;
}

#If it is executing in a container, proceed easy with this all-in-one block


### 3a. CHECK FOR USER postgres: (NO LONGER USED!)

###print "\nChecking system user \"postgres\"... ";

###my $POSTGRES_SYS_NAME = "postgres";
###$POSTGRES_SYS_UID = ( getpwnam("postgres") )[2];

# 3b. LOCATE THE EXECUTABLES, FOR jq AND psql:

my $sys_path = $ENV{'PATH'};
my @sys_path_dirs = split( ":", $sys_path );

if ( $pod_name ne "start-glassfish")
{
    for my $sys_path_dir (@sys_path_dirs) {
        if ( -x $sys_path_dir . "/jq" ) {
        $jq_exec = $sys_path_dir;
        last;
        }
    }
    if ( $jq_exec eq "" ) {
        print STDERR "\nERROR: I haven't been able to find the jq command in your PATH! Please install it from http://stedolan.github.io/jq/\n";
        exit 1;

    }
}

$psql_exec = "";

for my $sys_path_dir (@sys_path_dirs) {

    if ( -x $sys_path_dir . "/psql" ) {
	$psql_exec = $sys_path_dir;
    if ( $pod_name eq "start-glassfish"){
        $psql_exec = "/usr/bin"    
    }
    print $psql_exec;
	last;
    }
}

##Handling container env

if ($pod_name eq "start-glassfish")
{
    print "Init container starting \n";
    $CONFIG_DEFAULTS{'POSTGRES_SERVER'} = $ENV{"POSTGRES_SERVER"} . "." .  $ENV{"POSTGRES_SERVICE_HOST"};
    $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} = $ENV{"POSTGRES_DATABASE"};
    $CONFIG_DEFAULTS{'POSTGRES_USER'} = $ENV{"POSTGRES_USER"};
    $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} = $ENV{"POSTGRES_PASSWORD"};
    $WORKING_OS = "CentOS";
}

my $psql_major_version = 0;
my $psql_minor_version = 0;

# 3c. IF PSQL WAS FOUND IN THE PATH, CHECK ITS VERSION:

unless ( $psql_exec eq "" ) {
    open( PSQLOUT, $psql_exec . "/psql --version|" );

    my $psql_version_line = <PSQLOUT>;
    chop $psql_version_line;
    close PSQLOUT;
    
    my ( $postgresName, $postgresNameLong, $postgresVersion ) = split( " ", $psql_version_line );

    unless ( $postgresName eq "psql" && $postgresVersion =~ /^[0-9][0-9\.]*$/ ) {
	print STDERR "\nWARNING: Unexpected output from psql command!\n";
    }
    else {
	my (@psql_version_tokens) = split( '\.', $postgresVersion );

	print "\n\nFound Postgres psql command, version $postgresVersion.\n\n";

	$psql_major_version = $psql_version_tokens[0];
	$psql_minor_version = $psql_version_tokens[1];

	$pg_major_version = $psql_major_version;
	$pg_minor_version = $psql_minor_version;

    }
}

# a frequent problem with MacOSX is that the copy of psql found in the PATH
# belongs to the older version of PostgresQL supplied with the OS, which happens
# to be incompatible with the newer builds from the Postgres project; which are
# recommended to be used with Dataverse. So if this is a MacOSX box, we'll
# check what other versions of PG are available, and select the highest version
# we can find:

if ( $WORKING_OS eq "MacOSX" ) {
    my $macos_pg_major_version = 0;
    my $macos_pg_minor_version = 0;

    for $macos_pg_minor_version ( "5", "4", "3", "2", "1", "0" ) {
	if ( -x "/Library/PostgreSQL/9." . $macos_pg_minor_version . "/bin/psql" ) {
	    $macos_pg_major_version = 9;
	    if (   ( $macos_pg_major_version > $psql_major_version )
		   || ( $macos_pg_minor_version >= $psql_minor_version ) )
	    {
		$psql_exec        = "/Library/PostgreSQL/9." . $macos_pg_minor_version . "/bin";
		$pg_major_version = $macos_pg_major_version;
		$pg_minor_version = $macos_pg_minor_version;
	    }
	    last;
	}
    }

    # And if we haven't found an 9.* version of postgresql installed, we'll also check
    # for version 8.* available:

    if ( $macos_pg_major_version < 9 ) {
	for $macos_pg_minor_version ( "4", "3" )
	    # TODO:
	    # Do we even want to support postgres 8.3?
	{
	    if ( -x "/Library/PostgreSQL/8." . $macos_pg_minor_version . "/bin/psql" ) {
		$macos_pg_major_version = 8;
		if (   $macos_pg_major_version > $psql_major_version
		       || $macos_pg_minor_version > $psql_minor_version )
		{
		    $psql_exec        = "/Library/PostgreSQL/8." . $macos_pg_minor_version . "/bin";
		    $pg_major_version = $macos_pg_major_version;
		    $pg_minor_version = $macos_pg_minor_version;
		}
		last;
	    }
	}
    }
}



my $psql_admin_exec = "";

if ( $psql_exec eq "" ) 
{ 
    if ( $pg_local_connection ) 
    {
	print STDERR "\nERROR: I haven't been able to find the psql command in your PATH!\n";
	print STDERR "Please make sure PostgresQL is properly installed; if necessary, add\n";
	print STDERR "the location of psql to the PATH, then try again.\n\n";

	exit 1;
    }
    else 
    {
	print "WARNING: I haven't been able to find the psql command in your PATH!\n";
	print "But since we are configuring a Dataverse instance to use a remote Postgres server,\n";
	print "we can still set up the database by running a setup script on that remote server\n";
	print "(see below for instructions).\n";
    }
} else {

    if ( $pg_major_version == 0 ) {
	# hmm?
    }

    print "(We'll be Using psql version " . $pg_major_version . "." . $pg_minor_version . ")\n";


    $psql_admin_exec = "PGPASSWORD=" . $CONFIG_DEFAULTS{'POSTGRES_ADMIN_PASSWORD'} . "; export PGPASSWORD; " . $psql_exec; 
    $psql_exec = "PGPASSWORD=" . $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} . "; export PGPASSWORD; " . $psql_exec; 

    print "Checking if we can talk to Postgres as the admin user...\n";
}

if ($ENV{'PREPOPULATE'} == 1){
    print "\nPre-populating the database:\n\n";

    my $SQL_REFERENCE_TEMPLATE = "../database/reference_data.sql";

    unless ( -f $SQL_REFERENCE_TEMPLATE ) {
        $SQL_REFERENCE_TEMPLATE = "reference_data.sql";
    }

    unless ( -f $SQL_REFERENCE_TEMPLATE ) {
        print "\nWARNING: Can't find .sql data template!\n";
        print "(are you running the installer in the right directory?)\n";

        exit 0;
    }
    my $psql_command = $psql_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'}
        . " -U " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " -d "
        . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . " -f" . $SQL_REFERENCE_TEMPLATE;
    unless ( ( my $exitcode = system("$psql_command") ) == 0 )
    {
        print "WARNING: Could not pre-populate Postgres database for the Dataverse application!\n";
        print "(command: " . $psql_command . ")\n";
        print "(psql exit code: " . $exitcode . ")\n";
        print "\nYou must populate the database in order for all the features of your \n";
        print "new Dataverse to be available. \n";
        print "\n";
        print "You can try this again, by executing the following on the command line:\n";
        print "   psql -U $CONFIG_DEFAULTS{'POSTGRES_USER'} -d $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} -f $SQL_REFERENCE_TEMPLATE\n";
        print "then re-start glassfish  \n\n";
        print "\n";
        print "If it's still failing, please consult the installation manual and/or\n";
        print "seek support from the Dataverse team.\n\n";
        
        print "Press any key to continue... ";
        
        system "stty cbreak </dev/tty >/dev/tty 2>&1";
        my $key = getc(STDIN);
        system "stty -cbreak </dev/tty >/dev/tty 2>&1";
        print "\n";
    }
    else{
        print "\nOK, done!\n";
        exit 0;

    }
}
# 4. CONFIGURE POSTGRES:

# 4a. BUT FIRST, CHECK IF WE CAN TALK TO POSTGRES AS THE ADMIN:

if (system( $psql_admin_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U postgres -d postgres -c 'SELECT * FROM pg_roles' > /dev/null 2>&1" ) ) 
{
    # No, we can't. :(
    if ($pg_local_connection) 
    {
    # If Postgres is running locally, this is a fatal condition. 
    # We'll give them some (potentially) helpful pointers and exit.
        print $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . "\n"; 

    print "Nope, I haven't been able to connect to the local instance of PostgresQL as the admin user.\n";
    print "\nIs postgresql running? \n";
    print "   On a RedHat-like system, you can check the status of the daemon with\n\n";
    print "      service postgresql start\n\n";
    print "   On MacOSX, use Applications -> PostgresQL -> Start Server.\n";
    print "   (or, if there's no \"Start Server\" item in your PostgresQL folder, \n";
    print "   simply restart your MacOSX system!)\n";
    print "\nAlso, please make sure that the daemon is listening to network connections!\n";
    print "   - at least on the localhost interface. (See \"Installing Postgres\" section\n";
    print "   of the installation manual).\n";
    print "\nFinally, did you supply the correct admin password?\n";
    print "   Don't know the admin password for your Postgres installation?\n";
    print "   - then simply set the access level to \"trust\" temporarily (for localhost only!)\n";
    print "   in your pg_hba.conf file. Again, please consult the \n";
    print "   installation manual).\n";
    exit 1;
    }
    else 
    {
    # If we are configuring the Dataverse instance to use a Postgres server 
    # running on a remote host, it is possible to configure the database
    # without opening remote access for the admin user. They will simply 
    # have to run this script in the "postgres-only" mode on that server, locally, 
    # then resume the installation here: 
    print "Nope, I haven't been able to connect to the remote Postgres server as the admin user.\n";
    print "(Or you simply don't have psql installed on this server)\n";
    print "It IS possible to configure a database for your Dataverse on a remote server,\n";
    print "without having admin access to that remote Postgres installation.\n\n";
    print "In order to do that, pleaes copy the installer (the entire package) to the server\n";
    print "where PostgresQL is running and run the installer with the \"--pg_only\" option:\n\n";
    print "   ./install --pg_only\n\n";

    print "Press any key to continue the installation process once that has been\n";
    print "done. Or press ctrl-C to exit the installer.\n\n";

    system "stty cbreak </dev/tty >/dev/tty 2>&1";
    my $key = getc(STDIN);
    system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    print "\n";
    }
}
else 
{
    print "Yes, we can!\n";

    # ok, we can proceed with configuring things...

    print "\nConfiguring Postgres Database:\n";

    if ($pod_name eq "start-glassfish")
    {
        system( $psql_admin_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U postgres -d postgres -c 'DROP DATABASE dvndb' ");
        system( $psql_admin_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U postgres -d postgres -c 'DROP USER dvnapp' ");
    }

    # 4c. CHECK IF THIS DB ALREADY EXISTS:
    
    my $psql_command_dbcheck =
    $psql_admin_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U postgres -c '' -d " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . ">/dev/null 2>&1";

    if ( ( my $exitcode = system($psql_command_dbcheck) ) == 0 ) 
    {    
    if ($force) 
    {
        print "WARNING! Database "
        . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'}
        . " already exists but --force given... continuing.\n";
    } 
    else 
    {
        print "WARNING! Database " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . " already exists!\n";
        print "\nPlease note that you can only use this installer to create a blank, \n";
        print "new and shiny Dataverse database. I.e., you cannot install on top of an \n";
        print "existing one. Please enter a different name for the DVN database.\n";
        print "\nPress any key to continue, or ctrl-C to exit the installer...\n\n";
        
        system "stty cbreak </dev/tty >/dev/tty 2>&1";
        my $key = getc(STDIN);
        system "stty -cbreak </dev/tty >/dev/tty 2>&1";
        print "\n";

    }
    }

    # 4d. CHECK IF THIS USER ALREADY EXISTS:
    
    my $psql_command_rolecheck =
    $psql_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -c '' -d postgres " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " >/dev/null 2>&1";
    if ( ( my $exitcode = system($psql_command_rolecheck) ) == 0 ) 
    {
    print "User (role) " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " already exists;\n";
    print "Proceeding.";
    }
    else 
    {
    # 4e. CREATE DVN DB USER:

    print "\nCreating Postgres user (role) for the DVN:\n";
    
    open TMPCMD, ">/tmp/pgcmd.$$.tmp";

    # with md5-encrypted password:
    my $pg_password_md5 =
        &create_pg_hash( $CONFIG_DEFAULTS{'POSTGRES_USER'}, $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} );
    my $sql_command =
        "CREATE ROLE \""
        . $CONFIG_DEFAULTS{'POSTGRES_USER'}
        . "\" PASSWORD 'md5"
        . $pg_password_md5
        . "' NOSUPERUSER CREATEDB CREATEROLE INHERIT LOGIN";

    print TMPCMD $sql_command;
    close TMPCMD;
        
    my $psql_commandline = $psql_admin_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U postgres -d postgres -f /tmp/pgcmd.$$.tmp >/dev/null 2>&1";

    my $out      = qx($psql_commandline 2>&1);
    my $exitcode = $?;
    unless ( $exitcode == 0 ) 
    {
        print STDERR "Could not create the DVN Postgres user role!\n";
        print STDERR "(SQL: " . $sql_command . ")\n";
        print STDERR "(psql exit code: " . $exitcode . ")\n";
        print STDERR "(STDERR and STDOUT was: " . $out . ")\n";
        exit 1;
    }

    unlink "/tmp/pgcmd.$$.tmp";
    print "done.\n";
    }
    
    # 4f. CREATE DVN DB:
    
    print "\nCreating Postgres database:\n";
    
    my $psql_command =
    $psql_exec
	. "/createdb -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U $CONFIG_DEFAULTS{'POSTGRES_USER'} "
    . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'}
        . " --owner="
    . $CONFIG_DEFAULTS{'POSTGRES_USER'};

    my $out      = qx($psql_command 2>&1);
    my $exitcode = $?;
    unless ( $exitcode == 0 ) 
    {
    print STDERR "Could not create Postgres database for the Dataverse app!\n";
    print STDERR "(command: " . $psql_command . ")\n";
    print STDERR "(psql exit code: " . $exitcode . ")\n";
    print STDERR "(STDOUT and STDERR: " . $out . ")\n";
    if ($force) 
    {
        print STDERR "\n--force called, continuing\n";
    }
    else 
    {
        print STDERR "\naborting the installation (sorry!)\n\n";
        exit 1;
    }
    }

}

if ($postgresonly) {
    print "\nOK, done.\n";
    print "You can now resume the installation on the main Dataverse host.\n\n";

    exit 0;
}
    

# Whether the user and the database were created locally or remotely, we'll now 
# verify that we can talk to that database, with the credentials of the database
# user that we want the Dataverse application to be using: 

if ( system( $psql_exec . "/psql -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -U " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " -d " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . " -c 'SELECT * FROM pg_roles' > /dev/null 2>&1" ) ) 
{
    print STDERR "Oops, haven't been able to connect to the database " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . ",\n";
    print STDERR "running on " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . ", as user " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . ".\n\n";
    print STDERR "Aborting the installation (sorry!)\n";
    exit 1; 
}


print "\nOK, done!\n";

sub create_pg_hash {
    my $pg_username = shift @_;
    my $pg_password = shift @_;

    my $encode_line = $pg_password . $pg_username;

    # for Redhat:

    ##print STDERR "executing /bin/echo -n $encode_line | md5sum\n";

    my $hash;
    $hash = `/bin/echo -n $encode_line | md5sum`;

    chop $hash;

    $hash =~ s/  \-$//;

    if ( ( length($hash) != 32 ) || ( $hash !~ /^[0-9a-f]*$/ ) ) {
        print STDERR "Failed to generate a MD5-encrypted password hash for the Postgres database.\n";
        exit 1;
    }
    return $hash;
}