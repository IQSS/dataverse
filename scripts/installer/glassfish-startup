#!/usr/bin/perl

##This script handles: GLASSFISH memory configuration, running glassfish-setup.sh and deploying war file
use strict;
use warnings;
use Getopt::Long;
use Socket;
use File::Copy;

my $verbose;

my $hostname;
my $gfuser;
my $gfdir;
my $mailserver;
my $yes;
my $force;
my $nogfpasswd;
my $admin_email;
my ($rez) = GetOptions(
    #"length=i" => \$length,    # numeric
    #"file=s"   => \$data,      # string
    "verbose"      => \$verbose,

    "hostname=s"   => \$hostname,
    "gfuser=s"     => \$gfuser,
    "gfdir=s"      => \$gfdir,
    "mailserver=s" => \$mailserver,
    "y|yes"        => \$yes,
    "f|force"      => \$force,
    "nogfpasswd"   => \$nogfpasswd,
    "admin_email=s" => \$admin_email,
);

my @CONFIG_VARIABLES;


@CONFIG_VARIABLES = (
	'HOST_DNS_ADDRESS',
	'GLASSFISH_USER',
	'GLASSFISH_DIRECTORY',
	'ADMIN_EMAIL',
	'MAIL_SERVER',

	'POSTGRES_SERVER',
	'POSTGRES_PORT',
	'POSTGRES_ADMIN_PASSWORD',
	'POSTGRES_DATABASE',
	'POSTGRES_USER',
	'POSTGRES_PASSWORD',

	'SOLR_LOCATION', 
	
	'RSERVE_HOST',
	'RSERVE_PORT',
	'RSERVE_USER',
	'RSERVE_PASSWORD'

	);


my %CONFIG_DEFAULTS = (
    'HOST_DNS_ADDRESS',    'localhost',
    'GLASSFISH_USER',	   '',
    'GLASSFISH_DIRECTORY', '/usr/local/glassfish4',
    'GLASSFISH_USER',	   '',
    'ADMIN_EMAIL',         '',
    'MAIL_SERVER',         'mail.hmdc.harvard.edu',

    'POSTGRES_ADMIN_PASSWORD', 'secret',
    'POSTGRES_SERVER',   '127.0.0.1',
    'POSTGRES_PORT',     5432,
    'POSTGRES_DATABASE', 'dvndb',
    'POSTGRES_USER',     'dvnapp',
    'POSTGRES_PASSWORD', 'secret',

    'SOLR_LOCATION',     'LOCAL',

    'RSERVE_HOST',     'localhost',
    'RSERVE_PORT',     6311,
    'RSERVE_USER',     'rserve',
    'RSERVE_PASSWORD', 'rserve'

);

### SET UP VARIABLES
    $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'} = $ENV{'GLASSFISH_ROOT'};
    $CONFIG_DEFAULTS{'DEF_MEM_SIZE'} = $ENV{'MEM_HEAP_SIZE'} ;

    $CONFIG_DEFAULTS{'POSTGRES_PORT'} = $ENV{'DB_PORT'};
    $CONFIG_DEFAULTS{'POSTGRES_SERVER'} = $ENV{'DB_HOST'};
    $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} = $ENV{'DB_NAME'};
    $CONFIG_DEFAULTS{'POSTGRES_USER'} = $ENV{'DB_USER'};
    $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} = $ENV{'DB_PASS'};

    $CONFIG_DEFAULTS{'RSERVE_HOST'} = $ENV{'RSERVE_HOST'};
    $CONFIG_DEFAULTS{'RSERVE_PORT'} = $ENV{'RSERVE_PORT'};
    $CONFIG_DEFAULTS{'RSERVE_USER'} = $ENV{'RSERVE_USER'};
    $CONFIG_DEFAULTS{'RSERVE_PASSWORD'} = $ENV{'RSERVE_PASS'};

    $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'} = $ENV{'HOST_ADDRESS'};
    $CONFIG_DEFAULTS{'MAIL_SERVER'} = $ENV{'SMTP_SERVER'} ;
    my $WARFILE_LOCATION = $ENV{'WARFILE_LOCATION'};


my $API_URL = "http://localhost:8080/api";

# jodbc.postgresql.org recommends 4.2 for Java 8.
# updated drivers may be obtained from
#  https://jdbc.postgresql.org/download.html
my $postgres_jdbc = "postgresql-42.2.2.jar";


# 5. CONFIGURE GLASSFISH

my $glassfish_dir = $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'};

print "\nProceeding with the Glassfish setup.\n";

# 5b. DETERMINE HOW MUCH MEMORY TO GIVE TO GLASSFISH AS HEAP:

my $gf_heap_default = "2048m";
my $sys_mem_total   = 0;

if ( -e "/proc/meminfo" && open MEMINFO, "/proc/meminfo" ) {
    # Linux

    while ( my $mline = <MEMINFO> ) {
        if ( $mline =~ /MemTotal:[ \t]*([0-9]*) kB/ ) {
            $sys_mem_total = $1;
        }
    }

    close MEMINFO;

# TODO: Figure out how to determine the amount of memory when running in Docker
# because we're wondering if Dataverse can run in the free OpenShift Online
# offering that only gives you 1 GB of memory. Obviously, if this is someone's
# first impression of Dataverse, we want to to run well! What if you try to
# ingest a large file or perform other memory-intensive operations? For more
# context, see https://github.com/IQSS/dataverse/issues/4040#issuecomment-331282286
    if ( -e "/sys/fs/cgroup/memory/memory.limit_in_bytes" && open CGROUPMEM, "/sys/fs/cgroup/memory/memory.limit_in_bytes" ) {
        print "We must be running in Docker! Fancy!\n";
        while ( my $limitline = <CGROUPMEM> ) {
            # The goal of this cgroup check is for
	    # "Setting the heap limit for Glassfish to 750MB"
	    # to change to some other value, based on memory available.
	    print "/sys/fs/cgroup/memory/memory.limit_in_bytes: $limitline\n";
	    my $limit_in_kb = $limitline / 1024;
	    print "Docker limit_in_kb =  $limit_in_kb but ignoring\n";
	    # In openshift.json, notice how PostgreSQL and Solr have
	    # resources.limits.memory set to "256Mi".
	    # If you try to give the Dataverse/Glassfish container twice
	    # as much memory (512 MB) and allow $sys_mem_total to
	    # be set below, you should see the following:
	    # "Setting the heap limit for Glassfish to 192MB."
	    # FIXME: dataverse.war will not deploy with only 512 GB of memory.
	    # Again, the goal is 1 GB total (512MB + 256MB + 256MB) for
	    # Glassfish, PostgreSQL, and Solr to fit in the free OpenShift tier.
	    #print "setting sys_mem_total to: $limit_in_kb\n";
	    #$sys_mem_total = $limit_in_kb;
	}
        close CGROUPMEM;
    }
}
elsif ( -x "/usr/sbin/sysctl" ) {
    # MacOS X, probably...

    $sys_mem_total = `/usr/sbin/sysctl -n hw.memsize`;
    chop $sys_mem_total;
    if ( $sys_mem_total > 0 ) {
        $sys_mem_total = int( $sys_mem_total / 1024 );
        # size in kb
    }
}

if ( $sys_mem_total > 0 ) {
    # setting the default heap size limit to 3/8 of the available
    # amount of memory:
    $gf_heap_default = ( int( $sys_mem_total / ( 8 / 3 * 1024 ) ) );

    print "\nSetting the heap limit for Glassfish to " . $gf_heap_default . "MB. \n";
    print "You may need to adjust this setting to better suit \n";
    print "your system.\n\n";

    #$gf_heap_default .= "m";

}
else {
    print "\nCould not determine the amount of memory on your system.\n";
    print "Setting the heap limit for Glassfish to 2GB. You may need \n";
    print "to  adjust the value to better suit your system.\n\n";
}

push @CONFIG_VARIABLES, "DEF_MEM_SIZE";
$CONFIG_DEFAULTS{"DEF_MEM_SIZE"} = $gf_heap_default;

# TODO:
# if the system has more than 4GB of memory (I believe), glassfish must
# be run with the 64 bit flag set explicitly (at least that was the case
# with the MacOS glassfish build...). Verify, and if still the case,
# add a check.

print "\nInstalling the Glassfish PostgresQL driver... ";
system( "/bin/cp", "pgdriver/" . $postgres_jdbc, $glassfish_dir . "/glassfish/lib" );

# more diagnostics needed?

print "done!\n";

print "\n*********************\n";
print "PLEASE NOTE, SOME OF THE ASADMIN COMMANDS ARE GOING TO FAIL,\n";
print "FOR EXAMPLE, IF A CONFIGURATION SETTING THAT WE ARE TRYING\n";
print "TO CREATE ALREADY EXISTS; OR IF A JVM OPTION THAT WE ARE\n";
print "DELETING DOESN'T. THESE \"FAILURES\" ARE NORMAL!\n";
print "*********************\n\n";
print "When/if asadmin asks you to \"Enter admin user name\",\n";
print "it should be safe to hit return and accept the default\n";
print "(which is \"admin\").\n";

print "\nPress any key to continue...\n\n";

system "stty cbreak </dev/tty >/dev/tty 2>&1";
unless ($yes) {
    my $key = getc(STDIN);
}
system "stty -cbreak </dev/tty >/dev/tty 2>&1";
print "\n";

# start domain, if not running:

my $javacheck = `java -version`;
my $exitcode  = $?;
unless ( $exitcode == 0 ) {
    print STDERR "$javacheck\n" if $javacheck;
    print STDERR "Do you have java installed?\n";
    exit 1;
}
my $DOMAIN = "domain1";
my $DOMAIN_DOWN =
  `$CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'}/bin/asadmin list-domains | grep "$DOMAIN " | grep "not running"`;
print STDERR $DOMAIN_DOWN . "\n";
if ($DOMAIN_DOWN) {
    print "Trying to start domain up...\n";
    system( "sudo -u $CONFIG_DEFAULTS{'GLASSFISH_USER'} " . $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'} . "/bin/asadmin start-domain domain1" );

    # TODO: (?) - retest that the domain is running now? 
}
else {
    print "domain appears to be up...\n";
}

# create asadmin login, so that the user doesn't have to enter
# the username and password for every asadmin command, if
# access to :4848 is password-protected:

system( $glassfish_dir. "/bin/asadmin login" );

# NEW: configure glassfish using ASADMIN commands:

my $success = &setup_glassfish();

# CHECK EXIT STATUS, BARF IF SETUP SCRIPT FAILED:

unless ($success) {
    print "\nERROR! Failed to configure Glassfish domain!\n";
    print "(see the error messages above - if any)\n";
    print "Aborting...\n";

    exit 1;
}

# Additional config files:

my $JHOVE_CONFIG = "jhove.conf";
my $JHOVE_CONF_SCHEMA = "jhoveConfig.xsd";


my $JHOVE_CONFIG_DIST = $JHOVE_CONFIG; 
my $JHOVE_CONF_SCHEMA_DIST = $JHOVE_CONF_SCHEMA; 

# (if the installer is being run NOT as part of a distribution zipped bundle, but
# from inside the source tree - adjust the locations of the jhove config files:

unless ( -f $JHOVE_CONFIG ) {
    $JHOVE_CONFIG_DIST = "../../conf/jhove/jhove.conf";
    $JHOVE_CONF_SCHEMA_DIST = "../../conf/jhove/jhoveConfig.xsd";
}

# but if we can't find the files in either location, it must mean
# that they are not running the script in the correct directory - so 
# nothing else left for us to do but give up:

unless ( -f $JHOVE_CONFIG_DIST && -f $JHOVE_CONF_SCHEMA_DIST ) {
    print "\nERROR! JHOVE configuration files not found in the config dir!\n";
    print "(are you running the installer in the right directory?\n";
    print "Aborting...\n";
    exit 1;
}

print "\nCopying additional configuration files... ";

system( "/bin/cp -f " . $JHOVE_CONF_SCHEMA_DIST . " " . $glassfish_dir . "/glassfish/domains/domain1/config" );

# The JHOVE conf file has an absolute PATH of the JHOVE config schema file (uh, yeah...)
# - so it may need to be readjusted here: 

if ( $glassfish_dir ne "/usr/local/glassfish4" )
{
    system( "sed 's:/usr/local/glassfish4:$glassfish_dir:g' < " . $JHOVE_CONFIG_DIST . " > " . $glassfish_dir . "/glassfish/domains/domain1/config/" . $JHOVE_CONFIG);
}
else 
{
    system( "/bin/cp -f " . $JHOVE_CONFIG_DIST . " " . $glassfish_dir . "/glassfish/domains/domain1/config" );
}

print "done!\n";

# check if glassfish is running:
# TODO.

# 6. DEPLOY THE APPLICATION:

print "\nAttempting to deploy the application.\n";
print "Command line: " . $glassfish_dir . "/bin/asadmin deploy " . $WARFILE_LOCATION . "\n";
unless ((
     my $exit_code =
     system( $glassfish_dir . "/bin/asadmin deploy " . $WARFILE_LOCATION )
    ) == 0 )
{
    print STDERR "Failed to deploy the application! WAR file: " . $WARFILE_LOCATION . ".\n";
    print STDERR "(exit code: " . $exit_code . ")\n";
    print STDERR "Aborting.\n";
    exit 1;
}


sub setup_glassfish {
    my $success = 1;
    my $failure = 0;

    # We are going to run a standalone shell script with a bunch of asadmin
    # commands to set up all the glassfish components for the application.
    # All the parameters must be passed to that script as environmental
    # variables:

    $ENV{'GLASSFISH_ROOT'}   = $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'};
    $ENV{'GLASSFISH_DOMAIN'} = "domain1";
    $ENV{'ASADMIN_OPTS'}     = "";
    $ENV{'MEM_HEAP_SIZE'}    = $CONFIG_DEFAULTS{'DEF_MEM_SIZE'};

    $ENV{'DB_PORT'} = $CONFIG_DEFAULTS{'POSTGRES_PORT'};
    $ENV{'DB_HOST'} = $CONFIG_DEFAULTS{'POSTGRES_SERVER'};
    $ENV{'DB_NAME'} = $CONFIG_DEFAULTS{'POSTGRES_DATABASE'};
    $ENV{'DB_USER'} = $CONFIG_DEFAULTS{'POSTGRES_USER'};
    $ENV{'DB_PASS'} = $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'};

    $ENV{'RSERVE_HOST'} = $CONFIG_DEFAULTS{'RSERVE_HOST'};
    $ENV{'RSERVE_PORT'} = $CONFIG_DEFAULTS{'RSERVE_PORT'};
    $ENV{'RSERVE_USER'} = $CONFIG_DEFAULTS{'RSERVE_USER'};
    $ENV{'RSERVE_PASS'} = $CONFIG_DEFAULTS{'RSERVE_PASSWORD'};

    $ENV{'HOST_ADDRESS'} = $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'};
    $ENV{'SMTP_SERVER'}  = $CONFIG_DEFAULTS{'MAIL_SERVER'};
    $ENV{'FILES_DIR'} =
      $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'} . "/glassfish/domains/" . $ENV{'GLASSFISH_DOMAIN'} . "/files";
    
    system("./glassfish-setup.sh");

    if ($?) {
        return $failure;
    }
    return $success;
}