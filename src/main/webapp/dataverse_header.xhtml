<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
                xmlns:jsf="http://xmlns.jcp.org/jsf"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:o="http://omnifaces.org/ui"
                xmlns:iqbs="http://xmlns.jcp.org/jsf/composite/iqbs">
	<div class="overlay"></div>
    <div id="dataverse-header-block">
        <!-- Navbar Panel -->
        <nav id="navbarFixed" class="navbar navbar-default navbar-fixed-top" role="navigation" jsf:rendered="#{!widgetWrapper.widgetView}">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#topNavBar">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                   <a href="/">
                        <img class="header_image" src="/resources/images/logo.png"/>
                    </a>
                    <h:outputLink value="#" onclick="PF('statusInfo').show()" rendered="#{!empty settingsWrapper.get(':StatusMessageText')}">
                        <span class="label label-default status">#{!empty settingsWrapper.get(':StatusMessageHeader') ? settingsWrapper.get(':StatusMessageHeader') : bundle['header.status.header']}</span>
                    </h:outputLink>
                    <ui:fragment rendered="#{empty settingsWrapper.get(':StatusMessageText') and !empty settingsWrapper.get(':StatusMessageHeader')}">
                        <span class="label label-default status">#{settingsWrapper.get(':StatusMessageHeader')}</span>
                    </ui:fragment>
                </div>
                <div class="collapse navbar-collapse" id="topNavBar">
                    <ul class="nav navbar-nav navbar-right">
                        <li>
                            <a id="navbar-search-toggle" title="#{bundle['header.search.title']}" style="display:none;">
                                <span class="glyphicon glyphicon-search"></span>
                            </a>
                        </li>
                        <form id="navbarsearchform" class="navbar-form navbar-left" role="search">
                            <div class="form-group">
                                <label class="sr-only" for="navbarsearch">#{bundle.search}</label>
                                <input id="navbarsearch" type="text" class="search-input ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all" size="28" value="" placeholder="#{bundle['header.search.title']}"/>
                            </div>
                            <a  id="navbarsearchbut" class="but_link but_link_small" href="#" onclick="window.location = '/?q=' + document.getElementById('navbarsearch').value; return false;" role="button">
                                <span class="glyphicon glyphicon-search"/> Search
                            </a>
                        </form>
                        <li>
                            <h:outputLink value="http://guides.scholarsportal.info/dataverse" target="_blank">
                                #{bundle['header.about']}
                            </h:outputLink>
                        </li>
                        <li class="dropdown">
                            <span id="dataverseSupportLink" class="dropdown-toggle" data-toggle="dropdown">
                                #{bundle['header.guides']} <b class="caret"></b>
                            </span>
                            <ul class="dropdown-menu">
                                <li>
                                    <h:outputLink value="#{settingsWrapper.guidesBaseUrl}/#{systemConfig.version}/user" target="_blank">
                                        #{bundle['header.guides.user']}
                                    </h:outputLink>
                                </li>
                                <li>
                                    <h:outputLink value="#{settingsWrapper.guidesBaseUrl}/latest/developers" target="_blank">
                                        <h:outputText value="#{bundle['header.guides.developer']}" />
                                    </h:outputLink>
                                </li>
                                <li>
                                    <h:outputLink value="#{settingsWrapper.guidesBaseUrl}/latest/installation" target="_blank">
                                        <h:outputText value="#{bundle['header.guides.installation']}" />
                                    </h:outputLink>
                                </li>
                                <li>
                                    <h:outputLink value="#{settingsWrapper.guidesBaseUrl}/#{systemConfig.version}/api" target="_blank">
                                        <h:outputText value="#{bundle['header.guides.api']}" />
                                    </h:outputLink>
                                </li>
                                <li jsf:rendered="#{dataverseSession.user.superuser}">
                                    <h:outputLink value="#{settingsWrapper.guidesBaseUrl}/latest/admin" target="_blank">
                                        <h:outputText value="#{bundle['header.guides.admin']}" />
                                    </h:outputLink>
                                </li>
                            </ul>
                        </li>
                        <o:form useRequestURI="true" class="navbar-form navbar-left navbar-form-link">
                            <p:commandLink value="#{bundle['header.support']}" oncomplete="PF('contactForm').show()" update=":contactDialog" actionListener="#{sendFeedbackDialog.initUserInput}">
                                <f:setPropertyActionListener target="#{sendFeedbackDialog.messageSubject}" value=""/>
                                <f:setPropertyActionListener target="#{sendFeedbackDialog.recipient}" value="#{null}"/>
                                <f:setPropertyActionListener target="#{sendFeedbackDialog.userMessage}" value=""/>
                                <f:setPropertyActionListener target="#{sendFeedbackDialog.userEmail}" value=""/>
                            </p:commandLink>
                        </o:form>
                        <li jsf:rendered="#{dataverseSession.user.superuser}">
                            <h:outputLink value="/dashboard.xhtml?dataverseId=#{dataverseServiceBean.findRootDataverse().id}">
                                <h:outputText value="#{bundle['header.dashboard']}" />
                            </h:outputLink>
                        </li>
                        <ui:fragment rendered="#{!dataverseSession.user.authenticated}">
                            <li>
                                <h:outputLink rendered="#{dataverseHeaderFragment.signupAllowed}"
                                              value="#{dataverseHeaderFragment.getSignupUrl(navigationWrapper.redirectPage)}">
                                    #{bundle['header.signUp']}
                                </h:outputLink>
                            </li>
                            <li>
                                <h:outputLink value="/loginpage.xhtml?#{loginRedirectPage}">
                                    #{bundle.login}
                                </h:outputLink>
                            </li>
                        </ui:fragment>
                        <ui:fragment rendered="#{dataverseSession.user.authenticated}">
                            <li class="dropdown accountName">
                                <span id="lnk_header_account_dropdown" class="dropdown-toggle" data-toggle="dropdown">
                                    <ui:fragment rendered="#{dataverseSession.user.superuser}">
                                        <span class="glyphicon glyphicon-user text-danger"></span>
                                    </ui:fragment>
                                    <h:outputText styleClass="#{dataverseSession.user.superuser ? 'text-danger' : ''}" value="#{dataverseSession.user.displayInfo.title}" id="userDisplayInfoTitle"/>
                                    <h:outputText styleClass="label label-danger" rendered="#{ dataverseHeaderFragment.getUnreadNotificationCount(dataverseSession.user.id) > 0 }"
                                                  value="#{ dataverseHeaderFragment.getUnreadNotificationCount(dataverseSession.user.id) }" />                                    <b class="caret"></b>
                                </span>
                                <ul class="dropdown-menu">
                                    <li>
                                        <h:outputLink value="/dataverseuser.xhtml">
                                            <f:param name="selectTab" value="dataRelatedToMe" />
                                            <h:outputText value="#{bundle['header.user.selectTab.dataRelated']}" />
                                        </h:outputLink>
                                    </li>
                                    <li>
                                        <h:outputLink value="/dataverseuser.xhtml">
                                            <f:param name="selectTab" value="notifications" />
                                            <h:outputText value="#{bundle['header.user.selectTab.notifications']}" />
                                            <h:outputText styleClass="label label-danger" rendered="#{ dataverseHeaderFragment.getUnreadNotificationCount(dataverseSession.user.id) > 0 }"
                                                          value="#{dataverseHeaderFragment.getUnreadNotificationCount(dataverseSession.user.id)}" />
                                        </h:outputLink>
                                    </li>
                                    <ui:remove>
                                        <li>
                                            <h:outputLink value="/dataverseuser.xhtml">
                                                <f:param name="selectTab" value="groupsRoles" />
                                                <h:outputText value="#{bundle['header.user.selectTab.groupsAndRoles']}" />
                                            </h:outputLink>
                                        </li>
                                    </ui:remove>
                                    <li>
                                        <h:outputLink value="/dataverseuser.xhtml">
                                            <f:param name="selectTab" value="accountInfo" />
                                            <h:outputText value="#{bundle['header.accountInfo']}" />
                                        </h:outputLink>
                                    </li>
                                    <li>
                                        <h:outputLink value="/dataverseuser.xhtml">
                                            <f:param name="selectTab" value="apiTokenTab" />
                                            <h:outputText value="#{bundle['header.user.selectTab.apiToken']}" />
                                        </h:outputLink>
                                    </li>
                                    <li class="divider"></li>
                                    <li class="logout">
                                        <o:form useRequestURI="true" styleClass="navbar-form navbar-left" pt:role="logout">
                                            <h:commandLink action="#{dataverseHeaderFragment.logout}" id="lnk_header_logout">
                                                <h:outputText value="#{bundle['header.logOut']}" />
                                            </h:commandLink>
                                        </o:form>
                                    </li>
                                </ul>
                            </li>
                        </ui:fragment>
                    </ul>
                </div>
            </div>
        </nav>
        <ui:param name="dataversePage" value="#{dataverseLinksStayOnPage == true ? '' : '/dataverse.xhtml' }"/>

        <!-- Header Panel -->
        <div id="dataverseHeader" class="container bg-muted"
                style="background:##{!empty dataverse.dataverseTheme.backgroundColor ? dataverse.dataverseTheme.backgroundColor : 'F5F5F5'};"
                jsf:rendered="#{showDataverseHeader and !widgetWrapper.widgetView}">
             <o:importFunctions type="org.apache.commons.lang.StringEscapeUtils"/>
            <div class="dataverseHeaderLogo" style="text-align:#{!empty dataverse.dataverseTheme.logoAlignment ? dataverse.dataverseTheme.logoAlignment : 'center'};; background:##{!empty dataverse.dataverseTheme.logoBackgroundColor ? dataverse.dataverseTheme.logoBackgroundColor : 'F5F5F5'};"
                 jsf:rendered="#{!empty dataverse.dataverseTheme.logo and dataverse.dataverseTheme.logoFormat == 'RECTANGLE'}">
                <img src="/logos/#{dataverse.logoOwnerId}/#{dataverse.dataverseTheme.logo}" alt="#{dataverse.name} #{bundle.dataverse}"/>
            </div>
            <div class="dataverseHeaderBlock">
                <div class="dataverseHeaderCell dataverseHeaderLogo" jsf:rendered="#{!empty dataverse.dataverseTheme.logo and dataverse.dataverseTheme.logoFormat == 'SQUARE'}">
                    <img src="/logos/#{dataverse.logoOwnerId}/#{dataverse.dataverseTheme.logo}" alt="#{dataverse.name} #{bundle.dataverse}"/>
                </div>
                <div class="dataverseHeaderCell dataverseHeaderName" jsf:rendered="#{!empty dataverse.name}">
                    <a href="/dataverse/#{dataverse.alias}" class="dataverseHeaderDataverseName" style="color:##{!empty dataverse.dataverseTheme.linkColor ? dataverse.dataverseTheme.linkColor : '428bca'};">#{dataverse.name} #{bundle.dataverse}</a>
                    <h:outputText style="color:##{!empty dataverse.dataverseTheme.textColor ? dataverse.dataverseTheme.textColor : '888888'};" value=" (#{dataverse.affiliation})" rendered="#{!empty dataverse.affiliation}"/>
                    <h:outputText value="#{bundle.unpublished}" styleClass="label label-warning label-unpublished" rendered="#{!dataverse.released}"/>
                </div>
                <div class="dataverseHeaderCell dataverseHeaderName" jsf:rendered="#{empty dataverse.name}">
                    <h:outputText styleClass="dataverseHeaderDataverseName" value="#{bundle.newDataverse}"/>
                </div>
                <div class="dataverseHeaderCell dataverseHeaderTagline" jsf:rendered="#{!empty dataverse.dataverseTheme.tagline and empty dataverse.dataverseTheme.linkUrl}">
                    <h:outputText escape="false" style="color:##{!empty dataverse.dataverseTheme.textColor ? dataverse.dataverseTheme.textColor : '888888'};" value="#{StringEscapeUtils:escapeHtml(dataverse.dataverseTheme.tagline)}" />
                </div>
                <div class="dataverseHeaderCell dataverseHeaderLink" jsf:rendered="#{!empty dataverse.dataverseTheme.tagline and !empty dataverse.dataverseTheme.linkUrl}">
                    <h:outputLink value="#{dataverse.dataverseTheme.linkUrl}" style="color:##{!empty dataverse.dataverseTheme.linkColor ? dataverse.dataverseTheme.linkColor : '428bca'};" target="_blank">
                        <h:outputText value="#{StringEscapeUtils:escapeHtml(dataverse.dataverseTheme.tagline)}" escape="false"/>
                    </h:outputLink>
                </div>
            </div>
        </div>

        <div id="breadcrumbNavBlock" class="container" jsf:rendered="#{dataverseHeaderFragment.breadcrumbs.size() > 1}">
            <ui:repeat value="#{dataverseHeaderFragment.breadcrumbs}" var="breadcrumb" varStatus="status">
                <h:outputText value=" > " styleClass="breadcrumbCarrot" rendered="#{!status.first}"/>
                <div class="breadcrumbBlock">
                    <h:outputText value="#{breadcrumb.breadcrumbText}" styleClass="#{'breadcrumbActive'}" rendered="#{status.last}"/>
                    <ui:fragment rendered="#{!status.last}">
                        <h:outputText value="#{breadcrumb.breadcrumbText}" rendered="#{!breadcrumb.dvObject.instanceofDataverse and !breadcrumb.dvObject.instanceofDataset and empty breadcrumb.url}"/>
                        <ui:fragment rendered="#{breadcrumb.dvObject == null and !empty breadcrumb.url}">
                            <ui:remove><!-- No widget code for admin pgs that would never display in widget --></ui:remove>
                            <a id="breadcrumbLnk#{status.index}" href="${breadcrumb.url}">
                                <h:outputText value="#{breadcrumb.breadcrumbText}"/>
                            </a>
                        </ui:fragment>
                        <ui:fragment rendered="#{breadcrumb.dvObject.instanceofDataverse}">
                            <c:set var="dvUrl" value="/dataverse/#{breadcrumb.dvObject.alias}"/>
                            <a id="breadcrumbLnk#{status.index}" href="#{widgetWrapper.isWidgetTarget(breadcrumb.dvObject) ? widgetWrapper.wrapURL(dvUrl) : dvUrl}" target="#{!widgetWrapper.widgetView or widgetWrapper.isWidgetTarget(breadcrumb.dvObject) ? '' : '_blank'}">
                                <h:outputText value="#{breadcrumb.breadcrumbText}"/>
                            </a>
                        </ui:fragment>
                        <ui:fragment rendered="#{breadcrumb.dvObject.instanceofDataset}">
                            <c:set var="dsUrl" value="/dataset.xhtml?persistentId=#{breadcrumb.dvObject.globalId}"/>
                            <a id="breadcrumbLnk#{status.index}" href="#{widgetWrapper.isWidgetTarget(breadcrumb.dvObject) ? widgetWrapper.wrapURL(dsUrl) : dsUrl}" target="#{!widgetWrapper.widgetView or widgetWrapper.isWidgetTarget(breadcrumb.dvObject) ? '' : '_blank'}">
                                <h:outputText value="#{breadcrumb.breadcrumbText}"/>
                            </a>
                        </ui:fragment>
                    </ui:fragment>
                </div>
            </ui:repeat>
        </div>

        <ui:remove>
            <!-- Removing this temporarily until we can fix the performance issues with it;
                 replaced with generic bookmarks; will have to see how to best make this work-->
            <div class="dropdown #{dataverseHeaderFragment.hasVisibleChildren(dv) ? 'dropdown-toggle keep-on' : ''}" data-delay="#{dataverseHeaderFragment.hasVisibleChildren(dv) ? '800' : ''}" data-hover="#{dataverseHeaderFragment.hasVisibleChildren(dv) ? 'dropdown' : ''}" data-target="#{dataverseHeaderFragment.hasVisibleChildren(dv) ? '#' : ''}" data-close-others="#{dataverseHeaderFragment.hasVisibleChildren(dv) ? 'true' : ''}">
                <h:outputText value="#{dv.name} #{bundle.dataverse}" styleClass="#{dataverse.id == dv.id ? 'breadcrumbActive' : ''}" rendered="#{dataverse.id == dv.id and dataset == null}"/>
                <ui:fragment rendered="#{dataverse.id != dv.id or dataset != null}" >
                    <a id="breadcrumbLnk#{status.index}" href="/dataverse/#{dv.alias}">
                        <h:outputText value="#{dv.name} #{bundle.dataverse}"/>
                    </a>
                </ui:fragment>

                <ui:fragment rendered="#{dataverseHeaderFragment.hasVisibleChildren(dv)}">
                    <a id="taverse" styleClass="#{dataverse.id == dv.id ? 'breadcrumbActive' : ''}" role="button">
                        <span class="glyphicon glyphicon-chevron-down"></span>
                    </a>
                </ui:fragment>
            </div>
            <div class="dropdown-menu" role="menu" aria-labelledby="breadcrumbLnk#{status.index}" rendered="#{dataverseHeaderFragment.hasVisibleChildren(dv)}">
                <p:tree value="#{dataverseHeaderFragment.getDataverseTree(dv)}" var="node"  cache="true" id="tree">
                    <p:treeNode>
                        <h:outputText value="#{node.name} #{bundle.dataverse}" styleClass="breadcrumbActive" rendered="#{dataverse.id == node.id and dataset == null}"/>
                        <h:outputLink value="/dataverse/#{node.alias}" rendered="#{dataverse.id != node.id or dataset != null}">
                            <h:outputText value="#{node.name} #{bundle.dataverse}"/>
                        </h:outputLink>
                    </p:treeNode>
                </p:tree>
            </div>
        </ui:remove>
	<p:fragment id="bannerPanel">
           <div class="jumbotron">
	                <div class="container">
	                    <div class="row">
	                        <div class="float_left" id="institutional_dataverse">
	                        </div>
	                        <div class="float_right"><img src="/resources/images/slogan_1.png" class="slogan1"/>
	                            <p id="cta-area"><a class="but_link but_link_lg" id="create-my-space" href="dataverse.xhtml?ownerId=1" role="button">Create My Dataverse</a><span class="or-text">or</span><a class="or-link" href="dataverse.xhtml"><span style="margin-right: 5px;" class="glyphicon glyphicon-list" aria-hidden="true"></span>Explore</a></p>
	                        </div>
	                    </div>
	                </div>
	          </div>
        </p:fragment>
        <!-- Message Panel -->
        <p:fragment id="messagePanel" rendered="#{showMessagePanel}">
            <div class="container messagePanel">
                <iqbs:messages id="messages" collapsible="true" />
            </div>
        </p:fragment>
    </div>
      <script type="text/javascript">
                    //<![CDATA[
                     var ip_range_checker;
                     var affiliation;
                     var showing_content=false;
                    $(document).ready(function () {
                        displayBannerCheck();
                    	$("#navbarsearch").focus();
                    });
                    function displayBannerCheck(){
                     	var locate = window.location;
                     	//only do this from the home page
                 		if(locate.search=="" && locate.pathname=="/"){
                 			$("#bannerPanel").show();
                 			$("#dataverseHeader").hide();
                 			$("#metrics-block").hide();
                 			$("#search-row-panel").hide();
                 			$("#footer").hide();
                 			$("#actionButtonBlock").hide();
                 			$(".panelSearchForm").hide();
                 			$("#statement").hide();
                 			//if we are at the home page consider redirecting to a more suitable one based on the ip
                     		ip_range_checker=new IPRangeChecker(updateFeaturedSites)
                 		}else{
                 			showContent();
                 		}
                 	}
                    function showStatement(){
                    	var elm= $("#more_link")
                    	if(elm.data("showing")!=true){
                    		elm.data("showing",true)
                    		$("#statement").slideDown();
                    		elm.html("less...")
                    		scrollToID('#dataverseForm\\:statement_wrapper');
                    	}else{
                    		elm.data("showing",false)
                    		$("#statement").slideUp();
                    		elm.html("more...")
                    	}
                    }
                    function scrollToID(id){
                        var aTag = $(id);
                        $('html,body').animate({scrollTop: aTag.offset().top-($("#navbarFixed").height()+10)});
                    }
                    function showContent(){
                    	$(".overlay").fadeOut();
                    	showing_content=true;
                    }
                    //failsafe if ip range can't be determined
                    setTimeout(function() {
                	   if(!showing_content){
                		   showContent() 
                	   }
                	}, 1500);
                    
                    function updateFeaturedSites(){
                    	//note: we have to wait a bit of time before these items are loaded
             			if(affiliation=="ADMIN"){
         					affiliation="RYERSON";
         				}
             			//get the home by looking up the name
             			var home;
             			$.each(institution_mapping.affiliates, function (i, item) {
             				if(institution_mapping.affiliates[i].name==affiliation){
             					home=institution_mapping.affiliates[i].home
             				}
				    	});
             			$("div.owl-item").each(function( index ) {
             				  var path =$( this ).find("a")[0].pathname
             				  if(path.indexOf(home)>-1){
             					 $("div.owl-wrapper").prepend($( this ))
             				  }
             				 
             			});
             			showContent()
                    }
                    /*
                    The following appliation loads ip ranges and compares them to the system ip to see if there are any matches
                    */
                    IPRangeChecker=function(func){
                    	this.entitlements_xml="https://entitlements.scholarsportal.info/entitlements/entitlements/geo.xml"
                    	this.func=func
                    	//first load the json list
                    	$.ajax({
                    		  dataType: 'json',
                    		  url: "/resources/js/affiliates.json?callback=?",
                    		  data: {},
                    		  success: function (data) {
                    			  
                   					institution_mapping=data
                   					ip_range_checker.findIP();
                    			  },
                    			  error: function (e) {
                    				  institution_mapping=$.parseJSON(e.responseText)
                      			 	console.log(institution_mapping)
                      			 	ip_range_checker.findIP();
                      			  }
                    		});
                    }

                    IPRangeChecker.prototype.findIP=function() {
                    try{
                      var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection; //compatibility for firefox and chrome
                      var pc = new myPeerConnection({iceServers: []}),
                    	noop = function() {},
                    	localIPs = {},
                    	ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
                    	key;
                    
                      function ipIterate(ip) {
                    	if (!localIPs[ip]) {
                    		//
                    		ip_range_checker.setIP(ip)
                    		ip_range_checker.loadXMLFile(ip_range_checker.entitlements_xml,ip_range_checker.getIPRanges)
                    		localIPs[ip] = true;
                    	}
                      }
                      pc.createDataChannel(""); //create a bogus data channel
                      pc.createOffer(function(sdp) {
                    	sdp.sdp.split('\n').forEach(function(line) {
                    	  if (line.indexOf('candidate') < 0) return;
                    	  line.match(ipRegex).forEach(ipIterate);
                    	});
                    	pc.setLocalDescription(sdp, noop, noop);
                      }, noop); // create offer and set local description
                      pc.onicecandidate = function(ice) { //listen for candidate events
                    	if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
                    	ice.candidate.candidate.match(ipRegex).forEach(ipIterate);
                      };
                    }catch(e){
                    	//unable to get the users ip
                    	ip_range_checker.func();
                    }
                    }
                    IPRangeChecker.prototype.setIP = function(_ip){
                    	console.log(_ip)
                    	var reg_pat="|\\*|\\-)\\.("
                    	var ip_reg_ex="("+_ip.split(".").join(reg_pat)+reg_pat.slice(0, -3);
                    	console.log(ip_reg_ex)
                    	this.patt=new RegExp(ip_reg_ex)
                    }
                    IPRangeChecker.prototype.loadXMLFile = function(file,func){
                    	var xhttp = new XMLHttpRequest();
                    	xhttp.onreadystatechange = function() {
                    		
                    	    if (xhttp.readyState == 4 && xhttp.status == 200) {
                    	    	func(xhttp.responseXML);
                    	    }
                    	};
                    	xhttp.open("GET", file, true);
                    	xhttp.send();
                    }
                    
                    IPRangeChecker.prototype.getIPRanges=function(xml){
                    	var pattern_array=[];
                    	var match_array=[];
                    	var group =xml.getElementsByTagName("group");
                    	for (var i = 0; i <group.length; i++) {
                    		var pattern=group[i].getElementsByTagName("pattern");
                    		for (var j = 0; j <pattern.length; j++) {
                    			pattern_array.push({"name":group[i].attributes['name'].value,"range":pattern[j].innerHTML})
                    		}
                    	}
                    	//loop through each of the items and compare it to the ip
                    	for (var i = 0; i <pattern_array.length; i++) {
                    		if(ip_range_checker.patt.test(pattern_array[i]["range"])){
                    			match_array.push(pattern_array[i])
                    		}
                    		
                    	}
                    	if(match_array.length>0){
                    	//take the first match
                    		var redirect_page = window.location.hostname+"/dataverse/"
                    		affiliation =match_array[0].name;
                    		ip_range_checker.func();
                    	}
                    }
                    //]]>
                </script>
               
</ui:composition>