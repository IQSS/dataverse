package edu.harvard.iq.dataverse.authorization.providers.oauth2;

import edu.harvard.iq.dataverse.authorization.AuthenticatedUserDisplayInfo;
import edu.harvard.iq.dataverse.authorization.UserRecordIdentifier;

import java.io.Serializable;
import java.util.List;

/**
 * Describes a single user on a remote IDP that uses OAuth2.
 * Normally generated by {@link AbstractOAuth2Idp}.
 *
 * @author michael
 */
public class OAuth2UserRecord implements Serializable {

    private final String serviceId;

    /**
     * An immutable value, probably a number. Not a username that may change.
     */
    private final String idInService;

    /**
     * A potentially mutable String that is easier on the eye than a number.
     */
    private final String username;

    /**
     * For users originally coming from a Shibboleth IdP
     */
    private final String shibUniquePersistentIdentifier;
    private final String shibIdp;

    /**
     * For brokered users coming from another OIDC provider
     */
    private final String oidcUserId;
    public static final String OIDC_USER_ID_CLAIM = "oidc";

    private final AuthenticatedUserDisplayInfo displayInfo;
    private final List<String> availableEmailAddresses;
    private final OAuth2TokenData tokenData;

    /**
     * Constructor for users without Shibboleth attributes.
     */
    public OAuth2UserRecord(
            String serviceId,
            String idInService,
            String username,
            OAuth2TokenData tokenData,
            AuthenticatedUserDisplayInfo displayInfo,
            List<String> availableEmailAddresses
    ) {
        this(serviceId, idInService, username, null, null, null, tokenData, displayInfo, availableEmailAddresses);
    }

    /**
     * Full constructor for OAuth2 user records.
     */
    public OAuth2UserRecord(
            String serviceId,
            String idInService,
            String username,
            String shibUniquePersistentIdentifier,
            String shibIdp,
            String oidcUserId,
            OAuth2TokenData tokenData,
            AuthenticatedUserDisplayInfo displayInfo,
            List<String> availableEmailAddresses
    ) {
        this.serviceId = serviceId;
        this.idInService = idInService;
        this.username = username;
        this.shibUniquePersistentIdentifier = shibUniquePersistentIdentifier;
        this.shibIdp = shibIdp;
        this.oidcUserId = oidcUserId;
        this.tokenData = tokenData;
        this.displayInfo = displayInfo;
        this.availableEmailAddresses = availableEmailAddresses;
    }

    public String getServiceId() {
        return serviceId;
    }

    public String getIdInService() {
        return idInService;
    }

    public String getUsername() {
        return username;
    }

    public String getShibUniquePersistentIdentifier() {
        return shibUniquePersistentIdentifier;
    }

    public String getShibIdp() {
        return shibIdp;
    }

    public String getOidcUserId() {
        return oidcUserId;
    }

    public List<String> getAvailableEmailAddresses() {
        return availableEmailAddresses;
    }

    public AuthenticatedUserDisplayInfo getDisplayInfo() {
        return displayInfo;
    }

    public OAuth2TokenData getTokenData() {
        return tokenData;
    }

    public UserRecordIdentifier getUserRecordIdentifier() {
        return new UserRecordIdentifier(serviceId, idInService);
    }

    public boolean hasShibAttributes() {
        return shibIdp != null && shibUniquePersistentIdentifier != null;
    }

    @Override
    public String toString() {
        return "OAuth2UserRecord{" +
                "serviceId='" + serviceId + '\'' +
                ", idInService='" + idInService + '\'' +
                '}';
    }
}
