<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd;">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>edu.harvard.iq</groupId>
        <artifactId>dataverse-parent</artifactId>
        <version>${revision}</version>
        <relativePath>modules/dataverse-parent</relativePath>
    </parent>
    
    <!--
    If you are doing more than bumping the version number, please read
    doc/sphinx-guides/source/developers/dependencies.rst
    -->
    <artifactId>dataverse</artifactId>
    <packaging>${packaging.type}</packaging>
    <name>dataverse</name>
    <properties>
        <skipUnitTests>false</skipUnitTests>
        <skipIntegrationTests>false</skipIntegrationTests>
        
        <!-- By default, this module will produce a WAR file. -->
        <!-- This will be switched within the container profile! -->
        <packaging.type>war</packaging.type>
        
        <reload4j.version>1.2.18.4</reload4j.version>
        <flyway.version>8.5.10</flyway.version>
        <jhove.version>1.20.1</jhove.version>
        <jacoco.version>0.8.7</jacoco.version>
        <poi.version>5.2.1</poi.version>
        <tika.version>2.4.1</tika.version>
        <netcdf.version>5.5.3</netcdf.version>
    </properties>
    
    <!-- Versions of dependencies used both directly and transitive are managed here.
         REMEMBER: only manage things here that are going to be used ONLY for this module.
                   Anything else should go into the parent POM!
    -->
    <dependencyManagement>
        <dependencies>
            <!-- Dependency of sword2-server and used in our codebase -->
            <dependency>
                <groupId>org.apache.abdera</groupId>
                <artifactId>abdera-core</artifactId>
                <version>1.1.3</version>
            </dependency>
            <dependency>
                <groupId>org.apache.abdera</groupId>
                <artifactId>abdera-i18n</artifactId>
                <version>1.1.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!-- Declare any DIRECT dependencies here.
         In case the dependency is both transitive and direct (e. g. some common lib for logging),
         manage the version above and add the direct dependency here WITHOUT version tag, too.
    -->
    <!-- TODO: Housekeeping is utterly needed. -->
    <dependencies>

        <!-- This dependency ensures the lib is on the classpath. That way, anything coming from
             SLF4J should flow through our usual ways of using java.util.logging.
             (Which makes it also configurable using those mechanisms.) No direct use intended. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <dependency>
            <groupId>org.passay</groupId>
            <artifactId>passay</artifactId>
            <version>1.6.0</version>
        </dependency>
        
        <!-- TECHNICAL DEBT
             For a very long time, in a lots of places people used org.apache.commons.httpclient to access
             HTTP resources, wrap responses in exceptions etc.
             
             This library had been used via an transitive dependency of sword2-server. During its recent updates,
             the dependency was dropped, went missing, eventually breaking our code. Re-adding this 2007 goodie here
             as a direct dependency.
             
             There is a lot of technical debt in the codebase regarding HTTP client calls. Sometimes
             java.net.HttpUrlConnection is used, sometimes Apache, sometimes Unirest and what not.
             A big pile of historically grown mess. Some poor dev should take a Kleenex and call for "payback time". -->
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>
    
        <!-- BEGIN Data Deposit API v1 (SWORD v2) -->
        <dependency>
            <groupId>io.gdcc</groupId>
            <artifactId>sword2-server</artifactId>
            <version>2.0.0-SNAPSHOT</version>
        </dependency>
        <!-- Dependency to use sword2-server in our codebase -->
        <dependency>
            <groupId>org.apache.abdera</groupId>
            <artifactId>abdera-core</artifactId>
            <!-- no version here as managed in <dependencyManagement> above for convergence! -->
        </dependency>
        <!-- Dependency to use sword2-server in our codebase -->
        <dependency>
            <groupId>org.apache.abdera</groupId>
            <artifactId>abdera-i18n</artifactId>
            <!-- no version here as managed in <dependencyManagement> above for convergence! -->
        </dependency>
        
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-s3</artifactId>
            <!-- no version here as managed by BOM above! -->
        </dependency>
        <dependency>
          <groupId>com.apicatalog</groupId>
          <artifactId>titanium-json-ld</artifactId>
          <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.9</version>
            <scope>compile</scope>
        </dependency>
        <!-- Should be refactored and moved to transitive section above once on Java EE 8 (makes WAR smaller) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Should be refactored and moved to transitive section above once on Java EE 8 (makes WAR smaller) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!-- There are later versions of this lib available at jitpack.io,
                 but it seemed better to not add another repo. -->
            <groupId>org.everit.json</groupId>
            <artifactId>org.everit.json.schema</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <!-- Enable resolution of the JPA provider in persistence.xml -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>29.0-jre</version>
            <type>jar</type>
        </dependency>
        
        <!-- Jakarta EE & Eclipse MicroProfile base dependencies -->
        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- Jakarta Activation, MIME support etc -->
        <!-- Runtime implementation here only, as necessary for testing. -->
        <dependency>
            <groupId>org.eclipse.angus</groupId>
            <artifactId>angus-activation</artifactId>
            <scope>provided</scope>
            <!-- no version here as managed by Payara BOM above! -->
        </dependency>
        <dependency>
            <groupId>fish.payara.api</groupId>
            <artifactId>payara-api</artifactId>
            <scope>provided</scope>
            <!-- Note: The version was provided by Payara BOM till 6.2023.7, when they removed the Core BOM from it as
                       meant for internal use only. Simply referencing the version property here solves the problem. -->
            <version>${payara.version}</version>
        </dependency>
        
        <!-- JSON-P -->
        <!-- Runtime implementation here only, as necessary for testing. -->
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>jakarta.json</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- Jakarta Faces & related -->
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.faces</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>11.0.0</version>
            <classifier>jakarta</classifier>
        </dependency>
        <dependency>
            <groupId>org.primefaces.themes</groupId>
            <artifactId>all-themes</artifactId>
            <version>1.0.10</version>
        </dependency>
        <dependency>
            <groupId>org.omnifaces</groupId>
            <artifactId>omnifaces</artifactId>
            <version>4.0-M13</version>
        </dependency>
        
        <!-- Jakarta Validation API & runtime -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>provided</scope>
        </dependency>
    
        <!-- Jakarta Expression Language -->
        <!-- Runtime implementation here only, as necessary for testing. -->
        <dependency>
            <groupId>org.glassfish.expressly</groupId>
            <artifactId>expressly</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <!-- no version here as managed in <dependencyManagement> of parent for convergence! -->
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <!-- no version here as managed in <dependencyManagement> of parent for convergence! -->
        </dependency>
        <!-- Some utils from commons.lang have been moved to commons-text (especially escapeHtml()) -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>1.10.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math</artifactId>
            <version>2.2</version>
        </dependency>
        <dependency>
            <groupId>commons-validator</groupId>
            <artifactId>commons-validator</artifactId>
            <version>1.7</version>
        </dependency>
        
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-solrj</artifactId>
            <version>8.11.1</version>
        </dependency>
        <dependency>
            <groupId>colt</groupId>
            <artifactId>colt</artifactId>
            <version>1.2.0</version>
        </dependency>
        <!-- fits.jar, not available from network repos, supplied in local_lib -->
        <dependency>
            <groupId>nom.tam.fits</groupId>
            <artifactId>fits</artifactId>
            <version>2012-10-25-generated</version>
        </dependency>
        <dependency>
            <groupId>net.handle</groupId>
            <artifactId>handle</artifactId>
            <version>8.1.1</version>
        </dependency>
        <!-- UNF v5 (buggy), (temporarily) added for testing ingest against DVN v3  - L.A. -->
        <dependency>
            <groupId>edu.harvard.iq.dvn</groupId>
            <artifactId>unf5</artifactId>
            <version>5.0</version>
        </dependency>
        <!-- (new) UNF v6: -->
        <dependency>
            <groupId>org.dataverse</groupId>
            <artifactId>unf</artifactId>
            <version>6.0</version>
        </dependency>
        <!-- Rosuda Rengine and Rserve, packaged by org.nuiton.thirdparty -->
        <!-- TODO: see if there's another, better maintained maven repository for Rosuda libraries? - L.A. -->
        <dependency>
            <groupId>org.nuiton.thirdparty</groupId>
            <artifactId>REngine</artifactId>
            <version>0.6-1</version>
        </dependency>
        <dependency>
            <groupId>org.nuiton.thirdparty</groupId>
            <artifactId>Rserve</artifactId>
            <version>0.6-1</version>
        </dependency>
        <!-- Apache POI - used by ingest to parse MS Excel xslx files -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${poi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${poi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>${poi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openpreservation.jhove</groupId>
            <artifactId>jhove-core</artifactId>
            <version>${jhove.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openpreservation.jhove</groupId>
            <artifactId>jhove-modules</artifactId>
            <version>${jhove.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openpreservation.jhove</groupId>
            <artifactId>jhove-ext-modules</artifactId>
            <version>${jhove.version}</version>
        </dependency>
        <!-- JAI (Java Advanced Imaging) jars: -->
        <dependency>
            <groupId>com.github.jai-imageio</groupId>
            <artifactId>jai-imageio-core</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.ocpsoft.rewrite</groupId>
            <artifactId>rewrite-servlet</artifactId>
            <version>6.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.ocpsoft.rewrite</groupId>
            <artifactId>rewrite-config-prettyfaces</artifactId>
            <version>6.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>edu.ucsb.nceas</groupId>
            <artifactId>ezid</artifactId>
            <version>1.0.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.15.3</version>
        </dependency>
        <dependency>
            <groupId>io.searchbox</groupId>
            <artifactId>jest</artifactId>
            <version>0.1.7</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.15</version>
        </dependency>
        <!-- JavaSwift/JOSS: for accessing OpenStack cloud storage -->
        <dependency>
            <groupId>org.javaswift</groupId>
            <artifactId>joss</artifactId>
            <version>0.10.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.2</version>
        </dependency>
        <!-- OAuth2 authentication. -->
        <dependency>
            <groupId>com.github.scribejava</groupId>
            <artifactId>scribejava-apis</artifactId>
            <version>6.9.0</version>
        </dependency>
        <!-- OpenID Connect authentication -->
        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>oauth2-oidc-sdk</artifactId>
            <version>10.7.1</version>
        </dependency>
        <!-- New and Improved GDCC XOAI library! -->
        <dependency>
            <groupId>io.gdcc</groupId>
            <artifactId>xoai-data-provider</artifactId>
            <version>${gdcc.xoai.version}</version>
        </dependency>
        <dependency>
            <groupId>io.gdcc</groupId>
            <artifactId>xoai-service-provider</artifactId>
            <version>${gdcc.xoai.version}</version>
        </dependency>
        <!-- Added for AutoService -->
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>1.0-rc2</version>
            <optional>true</optional>
            <type>jar</type>
        </dependency>
        <!-- For API File Upload: 1 of 2 -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
        </dependency>
        <!-- For API File Upload: 2 of 2 -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mashape.unirest</groupId>
            <artifactId>unirest-java</artifactId>
            <version>1.4.9</version>
        </dependency>
        <!-- BagIt export -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <!-- no version here as managed by <dependencyManagement> above! -->
        </dependency>
        <dependency>
            <groupId>org.duracloud</groupId>
            <artifactId>common</artifactId>
            <version>7.1.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.duracloud</groupId>
            <artifactId>storeclient</artifactId>
            <version>7.1.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.amazonaws</groupId>
                    <artifactId>aws-java-sdk-sqs</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--  Full text indexing -->
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-core</artifactId>
            <version>${tika.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-parsers-standard-package</artifactId>
            <version>${tika.version}</version>
        </dependency>
        <!-- Named Entity Recognition -->
        <dependency>
            <groupId>org.apache.opennlp</groupId>
            <artifactId>opennlp-tools</artifactId>
            <version>1.9.1</version>
        </dependency>
        <dependency>
          <groupId>com.google.cloud</groupId>
          <artifactId>google-cloud-storage</artifactId>
          <!-- no version here as managed in <dependencyManagement> of parent for convergence! -->
        </dependency>
        <!-- JWT support, currently in DRSSubmitToArchiveCommand-->
        <!-- https://mvnrepository.com/artifact/com.auth0/java-jwt -->
        <dependency>
          <groupId>com.auth0</groupId>
          <artifactId>java-jwt</artifactId>
          <version>3.19.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.github.erdtman/java-json-canonicalization -->
        <dependency>
          <groupId>io.github.erdtman</groupId>
          <artifactId>java-json-canonicalization</artifactId>
          <version>1.1</version>
        </dependency>
        <dependency>
            <groupId>edu.ucar</groupId>
            <artifactId>cdm-core</artifactId>
            <version>${netcdf.version}</version>
        </dependency>
        <dependency>
            <groupId>io.gdcc</groupId>
            <artifactId>dataverse-spi</artifactId>
            <version>2.0.0</version>
        </dependency>
        <!-- TESTING DEPENDENCIES -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit.vintage.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.20.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.xmlunit</groupId>
            <artifactId>xmlunit-assertj3</artifactId>
            <version>2.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>5.3.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>1.5.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.vaadin.external.google</groupId>
                    <artifactId>android-json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.config</groupId>
            <artifactId>smallrye-config</artifactId>
            <version>${smallrye-mpconfig.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <!--        <testResources>
            <testResource>
                <directory>${project.basedir}/src/main/resources</directory>
            </testResource>
        </testResources>-->
        <!--        <testResources>
            <testResource>
              <directory>${project.basedir}/src/test/java</directory>
              <excludes>
                  <exclude>**/*.java</exclude>
              </excludes>
            </testResource>
            <testResource>
              <directory>${project.basedir}/src/test/resources</directory>
            </testResource>
          </testResources>-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>*.properties</include>
                    <include>**/*.properties</include>
                    <include>**/mime.types</include>
                    <include>**/*.R</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.sql</include>
                    <include>**/*.xml</include>
                    <include>**/firstNames/*.*</include>
                    <include>**/*.xsl</include>
                    <include>**/services/*</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <!-- Filter files matching here for Maven properties and replace -->
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>${target.java.version}</release>
                    <!-- for use with `mvn -DcompilerArgument=-Xlint:unchecked compile` -->
                    <compilerArgument>${compilerArgument}</compilerArgument>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <attachClasses>true</attachClasses>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>de.qaware.maven</groupId>
                <artifactId>go-offline-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <dynamicDependencies>
                    </dynamicDependencies>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <configuration>
                    <destfile>${basedir}/target/coverage-reports/jacoco-unit.exec</destfile>
                    <datafile>${basedir}/target/coverage-reports/jacoco-unit.exec</datafile>
                </configuration>
                <executions>
                    <execution>
                        <id>jacoco-initialize</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-site</id>
                        <phase>package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>4.3.0</version>
                <dependencies>
                    <dependency>
                        <groupId>javax.xml.bind</groupId>
                        <artifactId>jaxb-api</artifactId>
                        <version>2.3.1</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- https://stackoverflow.com/questions/46177921/how-to-run-unit-tests-in-excludedgroups-in-maven -->
                    <!-- testsToExclude come from the profile-->
                    <excludedGroups>${testsToExclude}</excludedGroups>
                    <skip>${skipUnitTests}</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <!-- https://stackoverflow.com/questions/11824328/default-build-profile-for-maven -->
                <!-- We set dev to true to developers don't have to run non-essential tests over and over. -->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <testsToExclude>edu.harvard.iq.dataverse.NonEssentialTests</testsToExclude>
            </properties>
        </profile>
        <profile>
            <id>all-unit-tests</id>
        </profile>
        <!-- TODO: Add a profile to run API tests (integration tests that end in IT.java. See conf/docker-aio/run-test-suite.sh -->
        <profile>
            <id>ct</id>
            <properties>
                <!-- Let's go FAST here - building the image should be quick to do by default. -->
                <skipUnitTests>true</skipUnitTests>
                <skipIntegrationTests>true</skipIntegrationTests>
                <!-- Once we truly run tests with Testcontainers, this should be switch to "docker", activating ITs -->
                <packaging.type>docker-build</packaging.type>
                <postgresql.server.version>13</postgresql.server.version>
            
                <app.image>gdcc/dataverse:${app.image.tag}</app.image>
                <app.image.tag>unstable</app.image.tag>
                <base.image>gdcc/base:${base.image.tag}</base.image>
                <base.image.tag>unstable</base.image.tag>
                <conf.image>gdcc/configbaker:${conf.image.tag}</conf.image>
                <conf.image.tag>${app.image.tag}</conf.image.tag>
    
                <docker.platforms></docker.platforms>
            
                <!-- Variables as used in docker-compose.yml -->
                <APP_IMAGE>${app.image}</APP_IMAGE>
                <POSTGRES_VERSION>${postgresql.server.version}</POSTGRES_VERSION>
                <SOLR_VERSION>${solr.version}</SOLR_VERSION>
                <DATAVERSE_DB_USER>dataverse</DATAVERSE_DB_USER>
            </properties>
        
            <build>
                <plugins>
                    <!-- Build the exploded WAR target directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>exploded</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                        </configuration>
                    </plugin>
                
                    <!-- Build image via Docker Maven Plugin -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <configuration>
                            <images>
                                <!-- Dataverse Application image -->
                                <image>
                                    <alias>dev_dataverse</alias>
                                    <name>${app.image}</name>
                                    <build>
                                        <buildx>
                                            <platforms>
                                                <platform>${docker.platforms}</platform>
                                            </platforms>
                                        </buildx>
                                        <dockerFile>Dockerfile</dockerFile>
                                        <args>
                                            <BASE_IMAGE>${base.image}</BASE_IMAGE>
                                        </args>
                                        <filter>@</filter>
                                        <assembly>
                                            <descriptor>assembly.xml</descriptor>
                                        </assembly>
                                    </build>
                                    
                                    <run>
                                    </run>
                                    
                                    <external>
                                        <type>compose</type>
                                        <basedir>${project.basedir}</basedir>
                                        <composeFile>docker-compose-dev.yml</composeFile>
                                    </external>
                                </image>
                                
                                <image>
                                    <alias>dev_bootstrap</alias>
                                    <name>${conf.image}</name>
                                    <build>
                                        <buildx>
                                            <platforms>
                                                <platform>${docker.platforms}</platform>
                                            </platforms>
                                        </buildx>
                                        <dockerFile>${project.basedir}/modules/container-configbaker/Dockerfile</dockerFile>
                                        <args>
                                            <SOLR_VERSION>${SOLR_VERSION}</SOLR_VERSION>
                                        </args>
                                        <filter>@</filter>
                                        <assembly>
                                            <descriptor>${project.basedir}/modules/container-configbaker/assembly.xml</descriptor>
                                        </assembly>
                                    </build>
                                    
                                    <!--
                                        We skip the run here as it is already included in the external run config
                                        above for the main image via the docker-compose file. Even if using
                                        -Ddocker.filter=dev_bootstrap, the run config from above is still enforced.
                                    -->
                                    <run>
                                        <skip>true</skip>
                                    </run>
                                </image>
                            </images>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <groups>end2end</groups>
                            <systemPropertyVariables>
                                <postgresql.server.version>${postgresql.server.version}</postgresql.server.version>
                            </systemPropertyVariables>
                            <skip>${skipIntegrationTests}</skip>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
