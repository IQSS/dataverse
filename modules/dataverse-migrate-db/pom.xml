<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd;">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>edu.harvard.iq</groupId>
        <artifactId>dataverse-parent</artifactId>
        <version>${revision}</version>
        <relativePath>../dataverse-parent</relativePath>
    </parent>
    
    <artifactId>migrate-db</artifactId>
    <packaging>pom</packaging>
    <name>migrate-db</name>
    
    <properties>
        <!-- Skip skip skip it all -->
        <skipUnitTests>true</skipUnitTests>
        <skipIntegrationTests>true</skipIntegrationTests>
        <maven.main.skip>true</maven.main.skip>
        <maven.test.skip>true</maven.test.skip>
        <maven.war.skip>true</maven.war.skip>
        <maven.install.skip>true</maven.install.skip>
        
        <docker.verbose>true</docker.verbose>
        <docker.showLogs>postgres,pg_dump</docker.showLogs>
        <docker.skip>false</docker.skip>
        <docker.skipStart>${docker.skip}</docker.skipStart>
        <docker.skipDump>${docker.skip}</docker.skipDump>
        <docker.skipStop>${docker.skip}</docker.skipStop>
        <docker.removeVolumes>true</docker.removeVolumes>
        <docker.allContainers>true</docker.allContainers>
        
        <postgresql.host>localhost</postgresql.host>
        <postgresql.port>15432</postgresql.port>
        <postgresql.db>dataverse</postgresql.db>
        <postgresql.username>${postgresql.db}</postgresql.username>
        <postgresql.password>supersecret</postgresql.password>
        <postgresql.dump.file>${project.basedir}/db_dump.sql</postgresql.dump.file>
        <postgresql.dump.file.ext>sql</postgresql.dump.file.ext>
        <postgresql.dump.target>${project.build.directory}</postgresql.dump.target>
        <!-- Default: wait for 30s (DMP default is 10s) -->
        <postgresql.waitForSec>30</postgresql.waitForSec>
        
        <!-- Migrations Placeholders -->
        <!-- See https://github.com/IQSS/dataverse/releases/tag/v6.3#upgrade-instructions-6-3, https://github.com/IQSS/dataverse/pull/10371  -->
        <migrate.keywordTermUri>false</migrate.keywordTermUri>
        <migrate.cleanupSavedSearches>false</migrate.cleanupSavedSearches>
    </properties>
    
    <build>
        <plugins>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                    <images>
                        <!-- Postgres image -->
                        <image>
                            <alias>postgres</alias>
                            <name>postgres:${postgresql.server.version}</name>
                            <build>
                                <skip>true</skip>
                            </build>
                            <run>
                                <network>
                                    <mode>custom</mode>
                                    <name>migration</name>
                                    <alias>migrationdb</alias>
                                </network>
                                <ports>
                                    <port>localhost:${postgresql.port}:5432</port>
                                </ports>
                                <env>
                                    <POSTGRES_USER>${postgresql.username}</POSTGRES_USER>
                                    <POSTGRES_PASSWORD>${postgresql.password}</POSTGRES_PASSWORD>
                                    <POSTGRES_DB>${postgresql.db}</POSTGRES_DB>
                                </env>
                                <volumes>
                                    <bind>
                                        <volume>${postgresql.dump.file}:/docker-entrypoint-initdb.d/dumb.${postgresql.dump.file.ext}</volume>
                                        <!-- Unnecessary for our use case, we just use the anonymous volume -->
                                        <!-- <volume>/var/lib/postgresql/data</volume> -->
                                    </bind>
                                </volumes>
                                <wait>
                                    <time>${postgresql.waitForSec}000</time>
                                    <tcp>
                                        <ports>
                                            <port>5432</port>
                                        </ports>
                                    </tcp>
                                </wait>
                            </run>
                        </image>
                        <!-- Postgres image, again, but to dump the database! -->
                        <image>
                            <alias>pg_dump</alias>
                            <name>postgres:${postgresql.server.version}</name>
                            <build>
                                <skip>true</skip>
                            </build>
                            <run>
                                <network>
                                    <mode>custom</mode>
                                    <name>migration</name>
                                </network>
                                <env>
                                    <POSTGRES_USER>${postgresql.username}</POSTGRES_USER>
                                    <POSTGRES_PASSWORD>${postgresql.password}</POSTGRES_PASSWORD>
                                </env>
                                <volumes>
                                    <bind>
                                        <volume>${postgresql.dump.target}:/dumptarget</volume>
                                        <!-- Unnecessary for our use case, we just use the anonymous volume -->
                                        <!-- <volume>/var/lib/postgresql/data</volume> -->
                                    </bind>
                                </volumes>
                                <env>
                                    <PGPASSWORD>${postgresql.password}</PGPASSWORD>
                                </env>
                                <!-- For debugging purposes:
                                <entryPoint>
                                    <arg>/bin/bash</arg>
                                    <arg>-c</arg>
                                    <arg>sleep infinity</arg>
                                </entryPoint>
                                -->
                                <entryPoint>
                                    <exec>
                                        <arg>sh</arg>
                                        <arg>-c</arg>
                                        <arg>pg_dump -h migrationdb -p 5432 -U ${postgresql.username} -v -f /dumptarget/migrated_db_dump.sql ${postgresql.db}</arg>
                                    </exec>
                                </entryPoint>
                                <wait>
                                    <time>${postgresql.waitForSec}000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>cleanup</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>start</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <skip>${docker.skipStart}</skip>
                            <images>
                                <image>
                                    <alias>postgres</alias>
                                    <run>
                                        <skip>false</skip>
                                    </run>
                                </image>
                                <image>
                                    <alias>pg_dump</alias>
                                    <run>
                                        <skip>true</skip>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>dump</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <skip>${docker.skipDump}</skip>
                            <images>
                                <image>
                                    <alias>postgres</alias>
                                    <run>
                                        <skip>true</skip>
                                    </run>
                                </image>
                                <image>
                                    <alias>pg_dump</alias>
                                    <run>
                                        <skip>false</skip>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>install</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${docker.skipStop}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>${flyway.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.flywaydb</groupId>
                        <artifactId>flyway-core</artifactId>
                        <version>${flyway.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.flywaydb</groupId>
                        <artifactId>flyway-database-postgresql</artifactId>
                        <version>${flyway.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>${postgresql.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <url>jdbc:postgresql://${postgresql.host}:${postgresql.port}/${postgresql.db}</url>
                    <user>${postgresql.username}</user>
                    <password>${postgresql.password}</password>
                    <sqlMigrationSeparator>__</sqlMigrationSeparator>
                </configuration>
                <executions>
                    <execution>
                        <id>migrate</id>
                        <phase>package</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                        <configuration>
                            <outOfOrder>true</outOfOrder>
                            <locations>
                                <location>filesystem:../../src/main/resources/db/migration</location>
                                <location>filesystem:extra-migrations</location>
                            </locations>
                            <placeholders>
                                <V6_3_migrate_keywordTermUri>${migrate.keywordTermUri}</V6_3_migrate_keywordTermUri>
                                <V5_4_cleanup_searches_and_links>${migrate.cleanupSavedSearches}</V5_4_cleanup_searches_and_links>
                            </placeholders>
                        </configuration>
                    </execution>
                    <execution>
                        <id>cleanup</id>
                        <phase>package</phase>
                        <goals>
                            <goal>repair</goal>
                        </goals>
                        <configuration>
                            <locations>
                                <location>filesystem:../../src/main/resources/db/migration</location>
                            </locations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
