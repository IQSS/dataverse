---
name: Application Container Image

on:
    # We are deliberately *not* running on push events here to avoid double runs.
    # Instead, push events will trigger from the base image and maven unit tests via workflow_call.
    workflow_call:
    pull_request:
        branches:
            - develop
            - master
        paths:
            - 'src/main/docker/**'
            - '.github/workflows/container_app_push.yml'

env:
    IMAGE_TAG: unstable
    BASE_IMAGE_TAG: unstable
    REGISTRY: "" # Empty means default to Docker Hub
    PLATFORMS: "linux/amd64,linux/arm64"

jobs:
    build:
        name: Build & deploy
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            pull-requests: write
        # Only run in upstream repo - avoid unnecessary runs in forks
        if: ${{ github.repository_owner == 'IQSS' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up JDK 11
              uses: actions/setup-java@v3
              with:
                  java-version: "11"
                  distribution: 'adopt'
            - name: Cache Maven packages
              uses: actions/cache@v3
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Build app container image with local architecture
              run: mvn -Pct package

            # Note: Accessing, pushing tags etc. to DockerHub or GHCR will only succeed in upstream because secrets.

            # Run this when triggered via push or schedule as reused workflow from base / maven unit tests
            - if: ${{ github.event_name != 'pull_request' && github.ref_name == 'develop' }}
              name: Push description to DockerHub
              uses: peter-evans/dockerhub-description@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
                  repository: gdcc/dataverse
                  short-description: "Dataverse Application Container Image providing the executable"
                  readme-filepath: ./src/main/docker/README.md

            - if: ${{ github.event_name != 'pull_request' }}
              name: Log in to Docker Hub registry
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - if: ${{ github.event_name == 'pull_request' }}
              name: Login to Github Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ secrets.GHCR_USERNAME }}
                  password: ${{ secrets.GHCR_TOKEN }}

            - name: Set up QEMU for multi-arch builds
              uses: docker/setup-qemu-action@v2

            - name: Re-set image tag based on branch (if master)
              if: ${{ github.ref_name == 'master' }}
              run: |
                  echo "IMAGE_TAG=alpha" >> $GITHUB_ENV
                  echo "BASE_IMAGE_TAG=alpha" >> $GITHUB_ENV
            - name: Re-set image tag and container registry when on PR
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  echo "IMAGE_TAG=$(echo "$GITHUB_HEAD_REF" | tr '\\/_:&+,;#*' '-')" >> $GITHUB_ENV
                  echo "REGISTRY='-Ddocker.registry=ghcr.io'" >> $GITHUB_ENV

            - name: Deploy multi-arch application container image
              run: mvn -Pct deploy -Dapp.image.tag=${{ env.IMAGE_TAG }} -Dbase.image.tag=${{ env.BASE_IMAGE_TAG }} ${{ env.REGISTRY }} -Ddocker.platforms=${{ env.PLATFORMS }}

            - uses: marocchino/sticky-pull-request-comment@v2
              if: ${{ github.event_name == 'pull_request' }}
              with:
                  header: app-registry-push
                  message: |
                      Pushed preview application image as [`ghcr.io/gdcc/dataverse:${{ env.IMAGE_TAG }}`](https://github.com/orgs/gdcc/packages/container/package/dataverse).
                      Use it by referencing it with its full name as printed above.
