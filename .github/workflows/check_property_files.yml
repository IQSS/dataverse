name: "Properties Check"
on:
    pull_request:
        #paths:
        #    - "**/*.properties"
        #    - "scripts/api/data/metadatablocks/*"
jobs:
    duplicate_keys:
        name: Duplicate Keys
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Run duplicates detection script
              shell: bash
              run: |
                  FAIL=0
                  
                  for PF in $(find . -wholename '*/src/*.properties'); do
                      FILTER=$(grep -a -v -E "^(#.*|\s*$)" "$PF" | cut -d"=" -f1 | sort | uniq -c | tr -s " " | { grep -vs "^ 1 " || true; })
                      if [ -n "$FILTER" ]; then
                          FAIL=1
                          
                          echo "::group::$PF"
                          for KEY in $(echo "$FILTER" | cut -d" " -f3); do
                              for LINE in $(grep -n -E -e "^$KEY=" "$PF" | cut -d":" -f1); do
                                  echo "::error file=$PF,line=$LINE::Found duplicate for key '$KEY' in line $LINE"
                              done
                          done
                          echo "::endgroup::"
                      fi
                  done
                  
                  if [ "$FAIL" -eq 1 ]; then
                      exit 1
                  fi

    metadata_blocks_properties:
        name: Metadata Blocks Properties
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Run metadata block properties verification script
              shell: bash
              run: |
                  for MDB in $(find scripts/api/data/metadatablocks -name '*.tsv'); do
                      BLOCK_NAME=$(sed -n "2p" "$MDB" | cut -f2)
                      BLOCK_DISPLAYNAME=$(sed -n "2p" "$MDB" | cut -f4)
                      PROPERTIES_FILE="src/main/java/propertyFiles/$BLOCK_NAME.properties"
                  
                      # Check correct file exists
                      if [ ! -r "$PROPERTIES_FILE" ]; then
                          echo "::error::Missing properties file for metadata block '$BLOCK_NAME', expected at '$PROPERTIES_FILE'"
                          continue
                      fi
                  
                      # Check metadata block properties exist and are equal to TSV source
                      if ! grep -a -q -e "^metadatablock.name=$BLOCK_NAME$" "$PROPERTIES_FILE"; then
                          echo "::error::Missing 'metadatablock.name=$BLOCK_NAME' or different from TSV source"
                      fi
                      if ! grep -a -q -e "^metadatablock.displayName=$BLOCK_DISPLAYNAME$" "$PROPERTIES_FILE"; then
                          echo "::error::Missing 'metadatablock.displayName=$BLOCK_DISPLAYNAME' or different from TSV source"
                      fi
                      if ! grep -a -q -e "^metadatablock.displayFacet=" "$PROPERTIES_FILE"; then
                          echo "::error::Missing 'metadatablock.displayFacet=...'"
                      fi
                  
                      # Check dataset fields
                      for FIELD in $(grep -a -A1000 "^#datasetField" "$MDB" | tail -n+2 | grep -a -B1000 "^#controlledVocabulary" | head -n-1 | cut -f2); do
                          for ENTRY in title description watermark; do
                              if ! grep -a -q -e "^datasetfieldtype.$FIELD.$ENTRY=" "$PROPERTIES_FILE"; then
                                  echo "::error::Missing key 'datasetfieldtype.$FIELD.$ENTRY=...'"
                              fi  
                          done
                      done
                  
                      # Check CV entries
                      grep -a -A1000 "^#controlledVocabulary" "$MDB" | tail -n+2 | 
                      {
                          while read LINE; do
                              FIELD_NAME=$(echo "$LINE" | cut -f1)
                              # TODO: needs to replace UTF-8 chars with nearest ascii here!
                              FIELD_VALUE=$(echo "$LINE" | cut -f2 | tr '[:upper:]' '[:lower:]' | tr " " "_")
                              if ! grep -q -a -e "^controlledvocabulary.$FIELD_NAME.$FIELD_VALUE=" "$PROPERTIES_FILE"; then
                                  echo "::error::Missing key 'controlledvocabulary.$FIELD_NAME.$FIELD_VALUE=...'"
                              fi 
                          done
                      };
                  done