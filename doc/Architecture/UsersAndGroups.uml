@startuml

'uncomment for higher dpi 
'skinparam dpi 300

package existingCode {
  class Role< DB >
  class DvObject< DB >
  class RoleAssignment< DB >
  class Dataverse< DB >

  note as n1
    A role can be assigned
    at the DvObject where it 
    is defined, or at any of
    that DvObject's descendants
  end note
}

package assignees {

  interface RoleAssignee {
    + identifier:String
    + displayInfo() : TBD
    + showInLists: Boolean
  }

  interface User {
  }

  class AuthenticatedUser< DB > {

  }

  class IpGroup {
    range: IpRange[]
  }

  class RoleAssigneeRecord< DB > {
    identifier: String
    displayInfo: TBD
  }

  class GuestUser {
    showInLists: False
  }

  class ApiKey< DB > {
    + key:String
    + title: String
  }

  interface Group< DB > {
    + name: String
    + description : String
    + data: Blob
    + provider: RoleAssigneeProvider
    + contains( a:RoleAssignee )
  }

  class ExplicitGroup< DB > {
    + add( a:RoleAssignee )
    + remove( a:RoleAssignee )
    + list: RoleAssignee[]
  }

  class AuthenticatedUsers
  class AllUsers

  class ShibGroup {
    headerMatchers: Map<String, Regex>
  }

}

RoleAssignee <|-- User
RoleAssignee <|-- Group
User <|-- AuthenticatedUser
User <|-- GuestUser
Group <|-- ExplicitGroup
Group <|-- AuthenticatedUsers
Group <|-- AllUsers
Group <|-- ShibGroup
Group <|-- IpGroup

RoleAssigneeRecord ..> RoleAssignee : "Locates"

AuthenticatedUser "1" *- "0..*" ApiKey

Role -> DvObject: Defined at
RoleAssignment -up-> "1" DvObject: At
RoleAssignment -up-> "1" Role: Assigns
RoleAssignment --> "1" RoleAssigneeRecord: To

ExplicitGroup ..> RoleAssignee: Contains
ExplicitGroup o--> RoleAssigneeRecord
ExplicitGroup "0..*" <--* "1" Dataverse

DvObject <|-- Dataverse

package roleassigneeprovider {
  
  class RoleAssigneeManager<Singleton> {
    assigneeProviders: Collection<AssigneeProvider>

    registerProvider( p:AssigneeProvider )
    getRoleAssignee( idtf:String ) : RoleAssignee
    getRoleAssignee( req:HttpRequest ) : RoleAssignee
  }

  interface RoleAssigneeProvider {
    + info : RoleAssigneeProviderInfo
    isQueryable(): Boolean
    acceptsRoleAssigneeIdentifier( idtf:String ): bool
    getRoleAssignee( idtf:String ) : RoleAssignee
    getRoleAssignee( req:HttpRequest ) : RoleAssignee
  }

  interface GroupCreator {
    + createGroup : Group
  }

  interface UserLister {
    + listUsers() : List<User>
    + findUsers( queryString ) : List<User>
  }

  class RoleAssigneeProviderInfo {
    + name
    + description
    + icon?
    + ...
  }

  class DatabaseAssigneeProvider 
  class ShibAssigneeProvider
  class IpAddressAssigneeProvider
  class LdapAssigneeProvider < future >
  class OAuthAssigneeProvider < future >

  RoleAssigneeManager *-->  "1..*" RoleAssigneeProvider
  RoleAssigneeProvider <|.. OAuthAssigneeProvider

  RoleAssigneeProvider <|-- UserLister   
  RoleAssigneeProvider <|-- GroupCreator 

  UserLister   <|-- DatabaseAssigneeProvider
  GroupCreator <|-- DatabaseAssigneeProvider
  UserLister   <|-- LdapAssigneeProvider
  GroupCreator <|-- LdapAssigneeProvider

  GroupCreator <|-- ShibAssigneeProvider
  GroupCreator <|-- IpAddressAssigneeProvider

  RoleAssigneeProvider *-> RoleAssigneeProviderInfo

}

Group <.. RoleAssigneeProvider : "Creates"
AuthenticatedUser  <.. RoleAssigneeProvider : "Creates/Updates"

package somewhere_else_in_dataverse {
  class AccessRequest< DB > {
    from: RoleAssigneeRecord
    dvo: DvObject
    metadata : TBD
  }

  interface Command {
    issuedBy: User
    effects: DvObject[]
  }

}
 
AccessRequest ..> RoleAssigneeRecord : "From"
AccessRequest ..> DvObject : "about"

Command "0..*" ..> "1" User : Issued By
Command ..> "1..*" DvObject : effects

@enduml
